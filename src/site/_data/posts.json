{"items":[{"title":"Practical CSS Grid - Launching My First Course","description":"<p><img src=\"/images/uploads/practical-grid-promo.png\" alt=\"Practical Grid Promo Image\" /></p> <p>Late last year, I took the plunge and began to work full time on my passion: education. That has led to today. Today, I officially launched my first online course: <a href=\"https://store.codecontemporary.com/practical-css-grid\">Practical CSS Grid</a>!</p> <p>I’ve been speaking at user groups and creating some blog content about CSS Grid for a couple years now. I figured it would be a good first course. Especially, since <a href=\"https://zendev.com/2019/01/15/frontend-development-topics-to-learn-in-2019.html\">have declared it a top thing to learn in 2019</a>!</p> <p>I’ve structured the course to be how I learn. I like building things that I could use in a site I’m building right away. </p> <p>With that in mind, I structured the course to tackle common design patterns in new ways using Grid. </p> <p>I also wanted to keep it relatively short. I’m very much into the idea of “micro courses” right now. Practical CSS Grid clocks in at about 2 hours. You won’t learn every single thing about Grid in this course, but you WILL learn what you need to take your CSS and your design to the next level in 2019.</p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <p>I’ve got a few goals for the course. One is financial. I’d love to sell 100 courses. This would allow me to keep pushing toward more content like this. </p> <p>Beyond anything else, though, I want to see CSS Grid adoption on most new sites in 2019. So the more folks learning, the better!</p> <p>I learned a lot in the past couple months working on this. I plan to share some of that in the near future. But for now, I’ll just feel the pride of shipping something and keep working to educate the world!</p> <p><a href=\"https://store.codecontemporary.com/practical-css-grid\">Practical CSS Grid Course Page</a></p>","link":"https://bryanlrobinson.com/blog/2019/01/23/launching-practical-css-grid/","url":"https://bryanlrobinson.com/blog/2019/01/23/launching-practical-css-grid/","created":1548201600000},{"title":"Build Trust on the Web incorporating User Worries with your User Stories","description":"<p>The web is suffering from a crisis of trust. Every week there’s a new story posted about a data breach or untrustworthy practices (I’m looking at you, Facebook).</p> <p>At the height of the Facebook-is-giving-away-your-data controversies, Dave Rupert shared this “user story” tweet:</p> <blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">As a Customer, I want to see relevant content and personalized advertisements using data siphoned from personal and private Facebook DMs without my consent.</p>&mdash; Old Guard Rupert (@davatron5000) <a href=\"https://twitter.com/davatron5000/status/1075434036854747137?ref_src=twsrc%5Etfw\">December 19, 2018</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> <p>While Dave’s post is the height of Twitter humor about this topic, it got me thinking: When we create user stories for new features, shouldn’t we also create user <em>worries</em> about them?</p> <h2 id=\"what-is-a-user-story\">What is a user story?</h2> <p>To the uninitiated, user stories are a technique popularized by Agile development practitioners. They are a way of breaking up products and features into discrete pieces to be created.</p> <p>There are as many ways of being Agile as there are companies using Agile methodologies, but the general take on user stories follows this pattern:</p> <blockquote> <p>As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some desired result &gt;.</p>\n</blockquote> <p>To take an example from Dave’s tongue-in-cheek tweet, the following user story could be real for Facebook:</p> <blockquote> <p>As a &lt; Personal User &gt;, I want &lt; my news feed to have the most relevant content based on my interests &gt; so that &lt; I can prioritize what items to read &gt;.</p>\n</blockquote> <p>This is a big feature for one user story. Big user stories are called “epics” and are broken up into multiple smaller stories.</p> <p>That’s the general flow. It helps create requirements documentation based around potential user needs. Read more about user stories here: <a href=\"https://www.mountaingoatsoftware.com/agile/user-stories\">https://www.mountaingoatsoftware.com/agile/user-stories</a></p> <h2 id=\"enter-user-worries\">Enter user worries</h2> <p>One thing that user stories don’t account for is user stress. Our products on the web have the ability to touch a wide range of people. And the web is a diverse and hopefully inclusive place. So, it follows that every feature we write will be used by drastically different people with different experience levels and thus different stress points.</p> <p>People’s anxiety regarding a new technology can vary based on many factors. Have they had their identity stolen before? How long have they used a computer/smartphone/web browser? Did they have a stressful day at work? Do they have a screaming baby in their arms? Not everyone will approach your new feature from the same starting point.</p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <p>How can we mitigate their concerns?</p> <p>I propose taking all your user stories and creating a list of potential user worries. You get bonus points if you are able to talk to users and find out their worries firsthand.</p> <p>Let’s take a look at corresponding user worries for our user story example above.</p> <h3 id=\"interests\">“Interests”</h3>\n<ul> <li>How do you know my interests?</li> <li>Are you reading my messages?</li> <li>Are you sharing my interests with another company?</li> <li>Can my friends see my interests?</li> <li>Can individual employees view my interests?</li> <li>Do you know what websites I visit?</li> <li>Can you listen in to my phone calls if I access this from my phone?</li> <li>Can I opt out?</li> <li>Do ads get higher priority than my friends?</li>\n</ul> <h3 id=\"most-relevant-content\">“Most relevant content”</h3>\n<ul> <li>If you filter my content, will I miss something that’s actually important to me?</li> <li>How do you know what I’m interested in?</li> <li>My sister is pregnant. Will I miss baby photos because I don’t have a history of viewing baby photos?</li> <li>Will my friends see what I post?</li>\n</ul> <p>Many users struggle with the concept of algorithms and data sorting. Many more struggle with big tech companies knowing what they like.</p> <p>If you prioritize these worries along with your features, you’ll discover additional features that can offset the worries. You may also find potential ethical concerns.</p> <p>While this example is obviously fresh in everyone’s minds from the recent Facebook scandals, let’s take a look at something that’s a little less loaded with security concerns.</p> <p>User story: As an author, I want my work saved regularly so that I cannot lose work if my application crashes.</p> <p>This feature can be best described as an “autosave.”</p> <p><strong>Let’s outline some user worries that go along with this feature:</strong></p> <ul> <li>How often is “regularly”?</li> <li>Will this save my mistakes?</li> <li>Can I undo a save?</li> <li>How do I know my document is saved?</li> <li>If I come back to a document, can I undo changes I made previously?</li> <li>If I forget about the auto-saving feature and hit Cmd/Ctrl+S, will that break things?</li> <li>Is a manual save handled differently from an autosave?</li> <li>(If online platform) What happens when I lose my Internet connection while working?</li>\n</ul> <p>These worries may not seem as earth shattering as those in the Facebook example, but to your users they may be very important.</p> <h2 id=\"how-do-you-create-a-user-worry\">How do you create a user worry?</h2> <p>Like most things that have the word “user” in their title, a user worry will come from one of two places.</p> <h3 id=\"the-best-source-of-user-information-user-research\">The best source of user information: User research</h3> <p>If you’re doing user stories properly, they’re probably stemming from some form of user research. Finding user worries is just another step in compiling your new features.</p> <p>You shouldn’t feel like user research has to have a large price tag attached. These can be simple conversations with your users. To gather user worries, simply ask your users a few additional questions.</p> <p><em>“Do you have any questions about &lt; feature &gt; ?”</em></p> <p>You’ll notice a pattern in my user worry examples above: They’re all questions. I find that most worries in life stem from unanswered questions. So, make sure your sample users ask you any questions they have.</p> <h3 id=\"the-second-best-source-of-user-information-empathy\">The second-best source of user information: Empathy</h3> <p>There’s no question that primary user research is the best way to get good user data. If for whatever reason you’re lacking research, empathy will win the day.</p> <p>If you have personas built, put yourself in those user mindsets. What are they thinking as they use your feature? What outside stressors could be weighing on them? When are they using this feature? How technologically savvy are they?</p> <p>In our autosave example, we probably are dealing with users from a wide range of tech backgrounds. If a particular user just got accustomed to saving his work often, it’s a new mental model for them to “not worry” about saving anymore. Often, less tech-savvy users view technology as an abstract “magic.” It was already magical enough that they could write on a machine; now they have to trust in that magic to keep their work safe. That’s a big leap for some.</p> <h2 id=\"utilizing-user-worries\">Utilizing user worries</h2> <p>A comprehensive list of user worries will give you more features and design elements to build. Let’s take a few our worries from our autosave example and find some new features or ideas that will address those worries.</p> <h3 id=\"how-do-i-know-my-document-is-saved\">How do I know my document is saved?</h3> <p><em>As a user, I want to know that my document is saved.</em></p> <h3 id=\"how-often-is-regularly\">How often is “regularly”?</h3> <p>Adding a timestamp to the most recent save could help put a user at ease. If I can see that the last save was 2 minutes ago, I can gain more understanding of how often this feature works.</p> <p><em>As a user, I want to know when my document was last saved.</em></p> <h3 id=\"if-i-come-back-to-a-document-can-i-undo-changes-i-made-previously\">If I come back to a document, can I undo changes I made previously?</h3> <p>This could be solved in a few ways. First, we could add a manual undo/redo button near the save notification. This would show users that undoing is possible outside Cmd/Ctrl+Z.</p> <p><em>As a user, I want a graphical representation of my undo/redo options.</em></p> <p>Next, we could provide a user with a version history.</p> <p><em>As a user, I want to be able to view and revert to previous saved versions of my document.</em></p> <h3 id=\"is-a-manual-save-handled-differently-from-an-autosave\">Is a manual save handled differently from an autosave?</h3> <p>We could provide an annotation for each save, whether it was manual or automatic.</p> <p><em>As a user, I want to know if a previous save is the result of a manual save or an automatic save.</em></p> <h2 id=\"why-user-worries\">Why user worries?</h2> <p>We already have a lot to think about when we develop applications. Why would we voluntarily add more steps and more writing to that process?</p> <p>In the end, the applications whose developers show the most empathy and compassion for their users will win the day. The more you do to make users worry less, the more they’ll use your application.</p>","link":"https://bryanlrobinson.com/blog/2019/01/07/build-trust-incorporating-user-worries-with-your-user-stories/","url":"https://bryanlrobinson.com/blog/2019/01/07/build-trust-incorporating-user-worries-with-your-user-stories/","created":1546819200000},{"title":"2019 The Year of Markup-First Development","description":"<p><img src=\"/images/uploads/year-of-markup.jpg\" alt=\"Year of Markup Graphic\" /></p> <p>All right, everyone. I’m calling it. 2019 will be the year of “Markup-first development.” Not because we want it to be, but because we need it to be.</p> <p>The state of the web in 2018 has been heavy into the world of JavaScript. We’ve made amazing advancements in the way our sites work. Every site has the ability to feel like an application. Smooth, fast transitions happen between states and pages. It definitely feels like the future of the web.</p> <p>Without HTML, though, our fancy future may have a dystopian layer right beneath the surface.</p> <h2 id=\"why-worry-about-the-fate-of-html\">Why worry about the fate of HTML?</h2> <p>HTML is a simple authoring language. It’s declarative, descriptive and easily analyzed. It fits nicely in the “<a href=\"https://blog.logrocket.com/what-the-rule-of-least-power-means-for-modern-developers-b846010a8595\">Rule of Least Power</a>” as described by Tim Berners-Lee.</p> <p>Let’s break the importance of that down a little more.</p> <h3 id=\"html-is-declarative\">HTML is Declarative</h3> <p>A declarative language is easy to understand. HTML was created to be an authoring language for content. </p> <p>It’s structure is built in a way that non-technologists can learn quickly. I’ve taught HTML to college students and to 60-year old journalists. Across the board, it’s never taken more than an hour to pass on the knowledge they need to create simple content.</p> <p>Because of it’s declarative nature, not only do humans author it easily, but machines can as well. There are dozens of WYSIWYG editors available that can create viable markup. That’s not to say that machines can’t author JavaScript. At the end of the day, though, it requires very little power and logic to create HTML from simple rules.</p> <h3 id=\"html-is-descriptive\">HTML is Descriptive</h3> <p>HTML means what it says, by default. With no CSS and no JS, your page has additional meaning outside of your content. </p> <p>With no effort outside of your authoring, you are able to describe each piece of your content with important information. A paragraph is semantically a paragraph. An image is an image. </p> <h3 id=\"html-can-be-easily-analyzed\">HTML can be easily analyzed</h3> <p>Because of its descriptive nature and simple declarative style, HTML is easy for any system to analyze. All of the information is matched together with the data about the information. It can be read by a system and remixed. </p> <p>It can be used by a browser, by a screen reader or by a bot.</p> <p>If anything happens to its declarative and descriptive nature, it becomes much harder to analyze. This can have potentially crippling affects on your site and your users.</p> <p>If a bot can’t easily scrape your site, your search rankings will go down. If a screen reader doesn’t understand your markup, a user won’t be able to access your content. Write your content in something a browser doesn’t understand and no one with that browser can access it.</p> <p>So, why is it that more and more apps and websites look like this:</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;head&gt;</span> <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content=</span><span class=\"s\">\"ie=edge\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;title&gt;</span>My Awesome SPA site<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"app\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span></code></pre></figure> <p>I think the simple answer is that we get a lot of power from new methods and don’t want to have to think about old methods. That’s a simplistic take, but it’s not far from the mark.</p> <p>So, how do we fix this epidemic in 2019?</p> <h2 id=\"write-and-think-markup-first\">Write and think “Markup First”</h2> <p>Developers need to take a step back when writing the code for their application. They need to think and write in a markup-first mind set.</p> <p>How can you do this with minimal effort (because let’s face the facts, humans are lazy)? </p> <p>Here are my two simple steps to shipping accessible, analyzable, semantic code.</p> <h3 id=\"step-1-put-the-html-back-in-your-html-document\">Step 1: Put the HTML back in your HTML document</h3> <p>Shipping an HTML document with no content to the browser and praying to your JavaScript to finish the job is not a sound strategy.</p> <p>Let’s examine some potential issues:</p> <ul> <li>A screen reader doesn’t understand your JS</li> <li>A bot doesn’t understand your JS</li> <li>Your JS doesn’t get downloaded due to network issues</li> <li>A user opts out of your JS (hey, it happens)</li>\n</ul> <p>These aren’t all the scenarios, but any of them can come up at any time. The more they happen, the more angry users you’ll have not being able to consume your app.</p> <p>Let’s talk about two strategies for shipping real HTML.</p> <p>First, there’s the old standby: write your HTML and have your app replace it with JavaScript.</p> <p>Most modern JavaScript frameworks want a single root element to completely overwrite. Might as well use that to your advantage.</p> <p>Write your HTML inside of that element and then let the JS take it from there.</p> <p>This method works well for small applications. As soon as you have more than a handful of states or routes, it becomes much more difficult to manage. You need an individual HTTP route for each of your JS routes.</p> <h4 id=\"thats-where-prerendering-comes-in\">That’s where prerendering comes in.</h4> <p>The “simple” solution to pre-rendering is to use a third party. Prerender.io is a popular service that you can integrate with that will build and store static HTML for your app. It becomes a dependency of your code and you have API access to its functionality. </p> <p>Prerender is a third-party software as a service product. You may not want to pay a company to do this for you.</p> <h4 id=\"thats-ok-there-are-other-methods-as-well\">That’s OK. There are other methods, as well.</h4> <p>One of the biggest trends in 2018 has been the resurgence of static hosting. You store your static HTML on a cheap, secure and lightning fast service. Since much of what we work with in front-end development doesn’t require server-side code, we can use a service like <a href=\"https://netlify.com\">Netlify</a> or <a href=\"https://surge.sh\">Surge.sh</a> to host.</p> <p>This gives us easy access to use our build process to create what we need for rendering HTML alongside our JS.</p> <p>The great thing about this is that there are frameworks that do a lot of the heavy lifting for you.</p> <p>Are you a React lover? Check out <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. Prefer Vue? <a href=\"https://nuxtjs.org/\">NuxtJS</a> is where you want to look. </p> <p>These are amazing because the complexity is in the build. This means that you get the developer convenience of writing your application once with tools you enjoy and the user gets all the benefits of server rendering AND SPA-style pages.</p> <h3 id=\"step-2-think-about-your-markup\">Step 2: Think about your markup</h3> <p>It’s not enough to just render HTML in your HTML document. It also needs to be well constructed.</p> <p>If you’re not accustomed to thinking about your HTML, it might come as a shock that there’s a lot of thought that’s been put into each element.</p> <p>Let’s look at the case of a clickable element. What HTML element should you use to make something clickable?</p> <p>Let’s get this out of the way first. Although you can write this code and have it work, don’t do this:</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;span</span> <span class=\"na\">onclick=</span><span class=\"s\">\"runFunction();\"</span><span class=\"nt\">&gt;</span>Click me!<span class=\"nt\">&lt;/span&gt;</span></code></pre></figure> <p>Full stop. Don’t do it. I feel like this shouldn’t have to be said, but I’ve seen it too much in the wild…</p> <p>If you answered an <code class=\"highlighter-rouge\">anchor</code> tag, you MIGHT be right, but only in some cases. I can’t do the subject justice like Ire Aderinokun in her post “<a href=\"https://bitsofco.de/anchors-vs-buttons/\">Anchors vs. Buttons</a>.” Read the entire post, but here’s a quick quote on anchors and buttons.</p> <blockquote> <p>The <code class=\"highlighter-rouge\">&lt;a&gt;</code> element represents a hyperlink to a destination page or a section within a page. The element is labelled by its contents, which can be anything from an image to additional (non-interactive) elements like <code class=\"highlighter-rouge\">&lt;div&gt;</code>s, <code class=\"highlighter-rouge\">&lt;p&gt;</code>s, etc.\n<code class=\"highlighter-rouge\">...</code>\nThe <code class=\"highlighter-rouge\">&lt;button&gt;</code> element, more specifically the <code class=\"highlighter-rouge\">&lt;button type=“button”&gt;</code> element, does nothing.</p>\n</blockquote> <p>She goes on to describe additional differences between the elements. Screen readers will read them differently and keyboard users interact with them differently.</p> <p>Her post really highlights how much thought can go into even the simplest choice.</p> <p>If you’re not willing to put the same thought into your markup as you are into your JavaScript, you’re doing a disservice to your user.</p> <p>Accessibility is immensely important. I can’t underscore that enough. If you’re not willing to think about your markup’s semantics for that, think about SEO value.</p> <p>I mentioned in the intro that HTML is descriptive and that the descriptiveness makes it analyzable. So, what happens if you describe things poorly? It’s still analyzable, but the analysis will be wrong. A bot reading your content will prioritize the wrong things.</p> <p>Imagine a blog post written like this:</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"article\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"big-header\"</span><span class=\"nt\">&gt;</span>Headline for my story<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut volutpat lorem dolor. Aliquam volutpat aliquet sollicitudin. Praesent venenatis pulvinar mi, vel elementum neque fringilla eu. Cras sodales neque vel ultricies condimentum. Duis a ante id felis egestas bibendum at vitae justo.<span class=\"nt\">&lt;/p&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"secondary-header\"</span><span class=\"nt\">&gt;</span>Section headline for my story<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut volutpat lorem dolor. Aliquam volutpat aliquet sollicitudin. Praesent venenatis pulvinar mi, vel elementum neque fringilla eu. Cras sodales neque vel ultricies condimentum. Duis a ante id felis egestas bibendum at vitae justo.<span class=\"nt\">&lt;/p&gt;</span> <span class=\"nt\">&lt;/div&gt;</span></code></pre></figure> <p>This may seem like a strawman argument, but I’ve seen instances of this too often.</p> <p>The problem with the code above is that bots have no way of structuring importance of those elements. In fact, the paragraphs will have a higher value in a bot’s eye than our headlines.</p> <p>When writing content, I pay close attention to the various headline levels. This adds the right metadata to my content. It makes it something that bots will enjoy analyzing. If you’re working on personal projects, it might not matter. I can almost guarantee your client or your boss (or boss’s boss) will care.</p> <p>Hand-in-hand with semantics is your structure. HTML is infinitely nestable. Just because you CAN do something doesn’t necessarily mean you should.</p> <p>Often nesting in HTML is a symptom of styling. To accomplish a design set before of, sometimes we suffer from <code class=\"highlighter-rouge\">divitis</code>. </p> <p>This is changing with modern CSS, but it requires a mental shift. The same goes for JavaScript. Sometimes that extra level has been mandatory in the past.</p> <p>Due to limitations in the way React rendered the DOM, if you wanted to render multiple sibling components, you would have to wrap them in an arbitrary parent.</p> <p>This is less than ideal for clean markup. In <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\">React v16.0</a>, the React team released the concept of Fragments. This allows for a developer to have multiple elements rendered at the top level of a component.</p> <p>I love the example that <a href=\"https://reactjs.org/docs/fragments.html\">the React docs use</a> for this use case. In the example, they have <code class=\"highlighter-rouge\">&lt;tr&gt;</code> that has a single component <code class=\"highlighter-rouge\">&lt;Columns /&gt;</code> inside. The <code class=\"highlighter-rouge\">&lt;Columns /&gt;</code> Component has two <code class=\"highlighter-rouge\">&lt;td&gt;</code>s inside of it. In the old way those would be wrapped in a <code class=\"highlighter-rouge\">&lt;div&gt;</code> or <code class=\"highlighter-rouge\">&lt;span&gt;</code> which is not valid HTML. By wrapping it in a <code class=\"highlighter-rouge\">&lt;React.Fragment&gt;</code> tag, it will instead render just the two <code class=\"highlighter-rouge\">&lt;td&gt;</code>. </p> <p>This keeps you structure much closer to its semantic needs. This will help bots and screen readers, but I also find it helps your future self.</p> <p>If you open up developer tools to inspect elements, the deeper things are nested the harder they are to debug. Save yourself the hassle and keep nesting simple.</p> <p>Elements that describe a single group of information should be grouped. Your HTML should read like a well-written article.</p> <p>Complete thoughts are grouped into sentences. Complete concepts are grouped into paragraphs. Complete points are grouped into sections. Sections are grouped into your story.</p> <p>HTML should be readable by anyone coming after you. It should be logical, clean and precise.</p> <h2 id=\"additional-perks\">Additional Perks</h2> <p>If you’re looking for more reasons to adopt this line of thinking, ponder this. </p> <p>There have been lots of movements telling you what to think or write first. <a href=\"https://www.lukew.com/ff/entry.asp?933\">Mobile first</a>. <a href=\"https://resilientwebdesign.com/\">Resilient design</a>. <a href=\"https://bryanlrobinson.com/blog/2016/12/17/feature-queries-on-the-rise/\">Support first</a>.</p> <p>If you take the time to structure your semantically correct markup properly, you get all of that out of the box. Everything we need the web to be in the future, stems from good HTML.</p> <h2 id=\"final-thoughts-please-think\">Final Thoughts: Please think</h2> <p>In 2019, as the JavaScript ecosystem continues to build it’s momentum, please don’t neglect the foundation of the web.</p> <p>The better the HTML of our sites and applications, the better the entire web will be.</p> <p>Just like you plan out your application, you should plan out how your application will render. Think about the order, the semantics, the structure and the users be they bots, browsers, screen readers or humans.</p> <p>Happy New Year!</p>","link":"https://bryanlrobinson.com/blog/2018/12/19/markup-first-development/","url":"https://bryanlrobinson.com/blog/2018/12/19/markup-first-development/","created":1545177600000},{"title":"Refactoring CSS into a Sass mixin","description":"<p><img src=\"/images/uploads/refactoring-css-to-sass-post.png\" alt=\"Graphic refactoring CSS to Sass\" /></p> <p>I’ve begun live-streaming office hours every week. In my first effort at it, I mostly just worked on this site’s code. I decided to create a new promo style for articles and realized I needed to refactor some of my Sass. </p> <p>It struck me as I was writing a new Sass mixin that there may be designers and developers out there that haven’t translated vanilla CSS into a Sass function. In this article, I want to show how to take often-used CSS and convert it into a DRY (Don’t Repeat Yourself) Sass mixin.</p> <figure style=\"grid-column: 1 / 3; grid-row: span 3; position: relative; width: 100%; height: 0; padding-bottom: 56.25%; margin-bottom: 1rem;\"> <iframe width=\"560\" height=\"315\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://www.youtube.com/embed/6UxUuDZ_ujQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n</figure> <h2 id=\"the-starting-css\">The Starting CSS</h2> <p>Usually when I talk about Sass mixins, I like to show the power on buttons. That’s not always the most applicable use case, though. In this instance, we’ll take the “interesting border” concept from my “<a href=\"https://bryanlrobinson.com/blog/2018/08/07/top-3-uses-of-after-and-before-css-pseudo-elements/\">Top 3 uses of ::before and ::after</a>” and convert it to a reusable Sass component.</p> <p>In this case, we need to affect four main elements with our CSS. The parent element, a universal (*) set of elements inside the parent and a ::before and ::after pseudo-element.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.article-promo</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.article-promo</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"p\">{</span> <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">100</span><span class=\"p\">;</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.article-promo</span><span class=\"nd\">::before</span> <span class=\"p\">{</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span> <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"n\">-</span> <span class=\"m\">20px</span><span class=\"p\">);</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"n\">-</span> <span class=\"m\">20px</span><span class=\"p\">);</span> <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.article-promo</span><span class=\"nd\">::after</span> <span class=\"p\">{</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">120deg</span><span class=\"p\">,</span> <span class=\"m\">#eaee44</span><span class=\"p\">,</span> <span class=\"m\">#33d0ff</span><span class=\"p\">);</span> <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"py\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">screen</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Taking a look at this code, you can see that it would be a lot to create by hand every time we wanted to do a different gradient border.</p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h2 id=\"step-1-identify-potential-sass-variables\">Step 1: Identify potential Sass variables</h2> <p>One of the best reasons to start using Sass is its variables. In this case, we’re going to use variables to create customizable properties for our border.</p> <p>I’ll start by finding things I want to change on a per-implementation.</p> <p>For a gradient border, I’ll want to adjust the “border size,” the start color, the end color, original background color and the direction of the gradient.</p> <p>Let’s move those values out into variables at the top of our CSS.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nv\">$border-size</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"nv\">$original-background-color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span> <span class=\"nv\">$gradient-start-color</span><span class=\"p\">:</span> <span class=\"mh\">#eaee44</span><span class=\"p\">;</span> <span class=\"nv\">$gradient-end-color</span><span class=\"p\">:</span> <span class=\"mh\">#33d0ff</span><span class=\"p\">;</span> <span class=\"nv\">$gradient-direction</span><span class=\"p\">:</span> <span class=\"m\">120deg</span><span class=\"p\">;</span></code></pre></figure> <p>Where we were originally using static values, we’ll now replace those with the variables.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"err\">.</span><span class=\"na\">article-promo</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">before</span> <span class=\"p\">{</span>\n<span class=\"err\"> ... </span><span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nv\">$original-background-color</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"nv\">$gradient-size</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"nv\">$gradient-size</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"o\">-</span> <span class=\"si\">#{</span><span class=\"nv\">$gradient-border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"si\">}</span><span class=\"p\">);</span>\n<span class=\"err\"> </span><span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"o\">-</span> <span class=\"si\">#{</span><span class=\"nv\">$gradient-border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"si\">}</span><span class=\"p\">);</span>\n<span class=\"err\"> </span><span class=\"nc\">...</span>\n<span class=\"p\">}</span> <span class=\"err\">.</span><span class=\"na\">article-promo</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"nf\">linear-gradient</span><span class=\"p\">(</span><span class=\"nv\">$gradient-direction</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-start-color</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-end-color</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Note the <code class=\"highlighter-rouge\">#{}</code> syntax in our <code class=\"highlighter-rouge\">calc()</code> function in this example. This is a use case of a concept called variable interpolation. Most languages have some form of this.</p> <p>In the case of Sass, we use that syntax mostly when inside of a CSS function. In this case, Sass sees the <code class=\"highlighter-rouge\">calc()</code> function and intends to compile the entire thing as one string to your CSS. The <code class=\"highlighter-rouge\">#{}</code> syntax causes Sass to pause its compile and render the value into that string instead.</p> <h2 id=\"step-2-identify-and-refactor-repeated-code-with-extends\">Step 2: Identify and refactor repeated code with @extends</h2> <p>In our example, we have two absolutely positioned pseudo-elements. These come with four properties that are identical: <code class=\"highlighter-rouge\">content</code>, <code class=\"highlighter-rouge\">display</code>, <code class=\"highlighter-rouge\">position</code> and <code class=\"highlighter-rouge\">z-index</code>.</p> <p>We’ll use Sass’s <code class=\"highlighter-rouge\">@extend</code> method to refactor this into a concise bit of compiled CSS.</p> <p>Side Note: Why use <code class=\"highlighter-rouge\">@extend</code> instead of creating a mixin and using <code class=\"highlighter-rouge\">@include</code> here? <code class=\"highlighter-rouge\">@extend</code> will create one rule set in CSS for multiple selectors; <code class=\"highlighter-rouge\">@include</code> will insert the same rule set into the compiled CSS. Extending in Sass is a great way to reduce complexity and size of compiled CSS. <a href=\"https://sass-lang.com/guide#topic-7\">Here are the docs on extending</a>.</p> <p>We’ll start by creating a “dummy” selector for our properties.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nv\">%pseudo-properties</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span> <span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span> <span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"err\"> </span><span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Note that <code class=\"highlighter-rouge\">%</code> in there. That’s not standard CSS. We use that so that we don’t generate the CSS until it’s called. This keeps selector bloat down a little bit.</p> <p>We can then reference that fake selector with the <code class=\"highlighter-rouge\">@extend</code> method on our pseudo elements.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"err\">.</span><span class=\"na\">article-promo</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">before</span> <span class=\"p\">{</span> <span class=\"err\"> </span><span class=\"o\">@</span><span class=\"nt\">extend</span> <span class=\"nv\">%pseudo-properties</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nc\">...</span>\n<span class=\"p\">}</span> <span class=\"err\">.</span><span class=\"na\">article-promo</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"err\"> </span><span class=\"o\">@</span><span class=\"nt\">extend</span> <span class=\"nv\">%pseudo-properties</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nc\">...</span>\n<span class=\"p\">}</span></code></pre></figure> <p>The compiled CSS will look like this: </p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.article-promo</span><span class=\"nd\">::before</span><span class=\"o\">,</span> <span class=\"nc\">.article-promo</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>The other code in your definition block for <code class=\"highlighter-rouge\">::before</code> or `::after will be compiled into its own selector later. You can keep your code together this way and not worry about bloat.</p> <h2 id=\"step-3-nest-your-selectors-for-easier-abstraction\">Step 3: Nest your selectors for easier abstraction</h2> <p>We can use Sass’s nesting abilities to clean up our code a little. </p> <p>This will also help as we extend the functionality to any other selector than our current one.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nc\">.article-promo</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"nv\">$border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"p\">;</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"p\">{</span> <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">100</span><span class=\"p\">;</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"err\">&amp;</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">before</span> <span class=\"p\">{</span> <span class=\"k\">@extend</span> <span class=\"nv\">%pseudo-properties</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nv\">$original-background-color</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"nv\">$gradient-size</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"nv\">$gradient-size</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"o\">-</span> <span class=\"si\">#{</span><span class=\"nv\">$gradient-border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"si\">}</span><span class=\"p\">);</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"o\">-</span> <span class=\"si\">#{</span><span class=\"nv\">$gradient-border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"si\">}</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"err\">&amp;</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"k\">@extend</span> <span class=\"nv\">%pseudo-properties</span><span class=\"p\">;</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"nf\">linear-gradient</span><span class=\"p\">(</span><span class=\"nv\">$gradient-direction</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-start-color</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-end-color</span><span class=\"p\">);</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">screen</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"err\"> </span></code></pre></figure> <h2 id=\"step-4-move-border-functionality-into-a-mixin\">Step 4: Move border functionality into a mixin</h2> <p>Here’s the big move. We’ll take everything that we’ve written inside our main selector and move it into an <code class=\"highlighter-rouge\">@mixin</code> declaration.</p> <p>We don’t need the main selector because that’s where we’ll apply our mixin. We don’t need the variables, because they will be arguments in our mixin.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"k\">@mixin</span> <span class=\"nf\">gradient-border</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"nv\">$border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"p\">;</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"p\">{</span> <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">100</span><span class=\"p\">;</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"err\">&amp;</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">before</span> <span class=\"p\">{</span> <span class=\"k\">@extend</span> <span class=\"nv\">%pseudo-properties</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nv\">$original-background-color</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"nv\">$gradient-size</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"nv\">$gradient-size</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"o\">-</span> <span class=\"si\">#{</span><span class=\"nv\">$gradient-border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"si\">}</span><span class=\"p\">);</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"o\">-</span> <span class=\"si\">#{</span><span class=\"nv\">$gradient-border-size</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"si\">}</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"err\">&amp;</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"k\">@extend</span> <span class=\"nv\">%pseudo-properties</span><span class=\"p\">;</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"nf\">linear-gradient</span><span class=\"p\">(</span><span class=\"nv\">$gradient-direction</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-start-color</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-end-color</span><span class=\"p\">);</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">screen</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Just like in a function definition in JavaScript, we’ll pass our variables into the parentheses.</p> <p>You can even specify default values. In my case, I’m keeping a consistent border with small tweaks, so I opted for default values.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"k\">@mixin</span> <span class=\"nf\">gradient-border</span><span class=\"p\">(</span><span class=\"nv\">$border-size</span><span class=\"o\">:</span> <span class=\"m\">10px</span><span class=\"o\">,</span> <span class=\"nv\">$original-background-color</span><span class=\"o\">:</span> <span class=\"no\">white</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-start-color</span><span class=\"o\">:</span> <span class=\"mh\">#eaee44</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-end-color</span><span class=\"o\">:</span> <span class=\"mh\">#33d0ff</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-direction</span><span class=\"o\">:</span> <span class=\"m\">120deg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nc\">...</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"step-5-declare-the-mixin-in-the-selectors-you-need-it\">Step 5: Declare the mixin in the selectors you need it</h2> <p>Finally, we have a mixin that we can use. We’ll use the Sass <code class=\"highlighter-rouge\">@include</code> method. Here are a few examples.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nc\">.article-promo</span> <span class=\"p\">{</span> <span class=\"err\"> </span><span class=\"o\">@</span><span class=\"nt\">include</span> <span class=\"nt\">gradient-border</span><span class=\"p\">;</span> <span class=\"c1\">// Gives all defaults</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.big-border</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"o\">@</span><span class=\"nt\">include</span> <span class=\"nt\">gradient-border</span><span class=\"o\">(</span><span class=\"nt\">50px</span><span class=\"o\">)</span><span class=\"p\">;</span> <span class=\"c1\">// If declared in order, you don't have to label your arguments</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.red-gradient</span> <span class=\"p\">{</span>\n<span class=\"err\"> @</span><span class=\"na\">include</span><span class=\"err\"> </span><span class=\"na\">gradient-border</span><span class=\"err\">($</span><span class=\"na\">gradient-start-color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"o\">,</span> <span class=\"nv\">$gradient-end-color</span><span class=\"o\">:</span> <span class=\"no\">darkred</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"nc\">.vertical-gradient</span> <span class=\"p\">{</span>\n<span class=\"err\"> @</span><span class=\"na\">include</span><span class=\"err\"> </span><span class=\"na\">gradient-border</span><span class=\"err\">($</span><span class=\"na\">gradient-direction</span><span class=\"p\">:</span> <span class=\"n\">to</span> <span class=\"nb\">bottom</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"using-this-for-other-examples\">Using this for other examples</h2> <p>This direction will work for any CSS you want to refactor. Sass gives us a lot of power and flexibility. It can either be something that becomes easy to maintain or a nightmare of redeclared variables and nesting. </p> <p>Creating reusable components is at the heart of any maintanence strategy. Follow this path and you can create components throughout any project.</p> <ol> <li>Identify reusable components</li> <li>Find pieces that need to be changed regularly</li> <li>Nest selectors for simplicity</li> <li>Use <code class=\"highlighter-rouge\">@extend</code> to keep your compiled CSS smaller</li>\n</ol> <p>What component will you start with?</p>","link":"https://bryanlrobinson.com/blog/2018/11/28/refactoring-css-into-sass-mixin/","url":"https://bryanlrobinson.com/blog/2018/11/28/refactoring-css-into-sass-mixin/","created":1543363200000},{"title":"Starting a new journey with Code Contemporary","description":"<p>It seems that everyone does a post like this: a bold announcement of a new journey. As of this morning, I’m beginning my new journey as an independent creator. </p> <p>I’ve left the comfortable confines of agency life to see what I can do creating resources for designers and developers. I’ll be writing, recording, speaking and consulting. Much of this will be under the heading of my new company: <a href=\"https://codecontemporary.com/\">Code Contemporary</a>. </p> <p>The site isn’t too much yet, but will eventually house many of the projects I have in mind.</p> <p>At the forefront of this is my first course: Practical CSS Grid. If you head over to the <a href=\"https://codecontemporary.com/\">Code Contemporary site</a> and sign up, you can get <strong>50% off</strong> when the course goes live later this year. The course and demos are written. All that’s left is to record the videos and put it out there for the world.</p> <p>Other than creating new paid courses, I plan on releasing as much free content as I can. To that end, I’ll still be posting blog posts to this site, <a href=\"https://www.youtube.com/channel/UCTLrD1MTRbjxtFCRaFXqkdQ\">posting videos on YouTube</a> and <a href=\"https://tinyletter.com/code-contemporary\">reinvigigorating my Code Contemporary Newsletter</a>. Beyond that, I’ll also be live streaming office hours each week.</p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h2 id=\"my-goal-by-the-numbers\">My goal by the numbers</h2> <p>Doing this full time will allow me to put out much more content. I plan on keeping track of this by setting some goals for myself each month.</p> <ul> <li>A new blog post every week</li> <li>One newsletter each week</li> <li>Two new videos each month</li> <li>At least 1 new course each quarter (hopefully more)</li> <li>One-to-two office hour streams per week</li>\n</ul> <p>As I move forward, I’m curious to find out what folks want to see and I plan on making adjustments to this. I want to do this as open as possible, which is why I’m starting with a few goals.</p> <p>I’ll also be revamping both this site and the Code Contemporary site to better match the things I’m doing. If no one shows up for my office hours with questions, I’ll be using that time to live stream the redesigns. </p> <p>I’m excited and terrified by the future.</p> <p>See you on the internet!</p>","link":"https://bryanlrobinson.com/blog/2018/11/19/starting-up-with-code-contemporary/","url":"https://bryanlrobinson.com/blog/2018/11/19/starting-up-with-code-contemporary/","created":1542585600000},{"title":"Dynamic Static Sites with Netlify and iOS Shortcuts","description":"<p>I’ve been using Netlify as my host for a while now and have consistently loved the experience. In my time with the service, I haven’t been utilizing it much more than a static site host.</p> <p>I really want to use more of their features and make my static site more dynamic.</p> <p><em>Demo</em>: <a href=\"/bryan-sight/\" target=\"_blank\">On this site</a></p> <p><em>GitHub Repository</em>: <a href=\"https://github.com/brob/netlify-shortcut-statuses\" target=\"_blank\">repo</a></p> <h2 id=\"the-challenge-share-data-from-ios-shortcuts-to-my-netlify-site\">The Challenge: Share data from iOS Shortcuts to my Netlify site</h2> <p><img src=\"/images/uploads/shortcuts-live.jpg\" alt=\"Screenshot of the demo\" /></p> <p>When iOS released Shortcuts with iOS12, I saw Netlify’s Twitter account share a video of someone deploying their site with a shortcut. I thought that was excellent, so I decided to go that route. </p> <p>With this challenge, I wanted to learn more about Serverless functions and Netlify’s API. I did some reading and based my solution off of Phil Hawkworth’s <a href=\"https://github.com/philhawksworth/jamstack-comments-engine\">excellent JAMstack comment engine functionality</a>.</p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h3 id=\"requirements\">Requirements</h3> <ul> <li>Works with my Static Site Generator: <a href=\"https://jekyllrb.com/\">Jekyll</a></li> <li>Does more than build my site</li> <li>Be able to be built over the course of a hackathon (I built the basics of this over the course of <a href=\"http://hackmemphis.com\">HACKmemphis</a>, an annual hackathon I organize)</li>\n</ul> <h3 id=\"feature-flow\">Feature Flow</h3> <p>I decided on a small set of features. Take a short dictation and photo from shortcuts and post it as a status to my site.</p> <p>Here was the flow I built from: </p> <ol> <li>Run the Shortcut which will take a photo and ask me “What’s happening?”</li> <li>Submit the string and image URI to a serverless function in Netlify</li> <li>Have the function process the data and submit to a Netlify form (which gets used as a data store)</li> <li>Generate a build/deploy</li> <li>On build, have Gulp make an API call to Netlify to get all the form data and create a JSON object that Jekyll can ingest</li> <li><em>Stretch Goal</em> Download the image from 3rd party (imgur) to be local to my project</li>\n</ol> <h2 id=\"setting-up-the-shortcut\">Setting up the shortcut</h2> <p><img src=\"/images/uploads/shortcuts-screens.jpg\" alt=\"Process screenshots of iOS Shortcut\" /></p> <p>The iOS Shortcuts app allows you to automate many pieces of your workflow. It has access to multiple Apple apps as well as some third party apps.</p> <p><strong>Here’s the shortcut I’ve created:</strong></p> <ol> <li>Use Apple’s Camera to take a photo</li> <li>Pass that photo to the Imgur app to upload to Imgur (need a place online for these to go; this was the easiest)</li> <li>Have Siri ask me “What’s happening” (more for demo purposes at HACKmemphis than anything else)</li> <li>Use the Dictation skill to record and type my response</li> <li>Pass that string plus the image URL from imgur to a Netlify function URL as parameters</li> <li>Hit that URL with Safari</li>\n</ol> <h2 id=\"creating-a-netlify-function-to-handle-the-data\">Creating a Netlify function to handle the data</h2> <p><img src=\"/images/uploads/netlify-functions.jpg\" alt=\"Netlify Function promo from netlify's website\" /></p> <p>Now that we’re sending the data to a URL on our site, we need something to handle that data. Remember, this is a static site.</p> <p>To do this, we can use Netlify’s awesome Functions. It’s important to note that this DOES cost money past a certain point. This sort of function would take a LOT of use to get past the free usage tier, though.</p> <p>Our function is split into two parts: formatting data and posting data to a database.</p> <h3 id=\"step-1-ingest-the-data-from-url-parameters-and-sanitize-it-for-use\">Step 1: Ingest the data from URL parameters and sanitize it for use</h3> <p>In this area, I discovered my first issue. The URLs I was getting from Imgur’s iOS shortcut came in different formats. Both of the formats were not the pure image. I never found the root cause of the varying formats, but baked in protections for that. To get the direct image URL, all it took was rewriting the URL string with <code class=\"highlighter-rouge\">download</code> in it.</p> <figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// populate environment variables locally.</span>\n<span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'dotenv'</span><span class=\"p\">).</span><span class=\"nx\">config</span><span class=\"p\">()</span> <span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">handler</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">const</span> <span class=\"nx\">doingString</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">queryStringParameters</span><span class=\"p\">.</span><span class=\"nx\">doing</span><span class=\"p\">;</span> <span class=\"kd\">const</span> <span class=\"nx\">imgUrl</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">queryStringParameters</span><span class=\"p\">.</span><span class=\"nx\">imgUrl</span><span class=\"p\">;</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">imgUrl</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">let</span> <span class=\"nx\">urlPieces</span> <span class=\"o\">=</span> <span class=\"nx\">imgUrl</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">);</span> <span class=\"kd\">let</span> <span class=\"nx\">photoId</span> <span class=\"o\">=</span> <span class=\"nx\">urlPieces</span><span class=\"p\">[</span><span class=\"nx\">urlPieces</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">photoId</span><span class=\"p\">.</span><span class=\"nx\">endsWith</span><span class=\"p\">(</span><span class=\"s1\">'.jpg'</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// Protects against imgur changing</span> <span class=\"kd\">let</span> <span class=\"nx\">idSplit</span> <span class=\"o\">=</span> <span class=\"nx\">photoId</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">);</span> <span class=\"nx\">photoId</span> <span class=\"o\">=</span> <span class=\"nx\">idSplit</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span> <span class=\"p\">}</span> <span class=\"kd\">var</span> <span class=\"nx\">imgDownloadLink</span> <span class=\"o\">=</span> <span class=\"s2\">`https://imgur.com/download/</span><span class=\"p\">${</span><span class=\"nx\">photoId</span><span class=\"p\">}</span><span class=\"s2\">`</span> <span class=\"p\">}</span> <span class=\"kd\">var</span> <span class=\"nx\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'form-name'</span> <span class=\"p\">:</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">FORM_NAME</span><span class=\"p\">,</span> <span class=\"s1\">'received'</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">(),</span> <span class=\"s1\">'doing'</span><span class=\"p\">:</span> <span class=\"nx\">doingString</span><span class=\"p\">,</span> <span class=\"s1\">'imgUrl'</span><span class=\"p\">:</span> <span class=\"nx\">imgDownloadLink</span> <span class=\"p\">};</span> <span class=\"p\">...</span>\n<span class=\"p\">}</span></code></pre></figure> <h3 id=\"step-2-post-that-data-to-a-form-on-netlify\">Step 2: Post that data to a form on Netlify</h3> <figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">handler</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"p\">...</span>\n<span class=\"kd\">var</span> <span class=\"nx\">approvedURL</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">POST_FORM</span><span class=\"p\">;</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">({</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"nx\">approvedURL</span><span class=\"p\">,</span> <span class=\"s1\">'formData'</span><span class=\"p\">:</span> <span class=\"nx\">payload</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">httpResponse</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">var</span> <span class=\"nx\">msg</span><span class=\"p\">;</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'Post to status list failed:'</span> <span class=\"o\">+</span> <span class=\"nx\">err</span><span class=\"p\">;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'Post to status list successful.'</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"kd\">var</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"Status posted. Deploy triggered.\"</span><span class=\"p\">;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span> <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">statusCode</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">msg</span> <span class=\"p\">});</span> <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span> <span class=\"p\">});</span> <span class=\"p\">};</span></code></pre></figure> <p>First, note that we’ll be using environment variables for our form endpoint as well as our form name. This removes “sensitive” data from our git repository. If someone has a form name, they can post to your forms and cost you money.</p> <p><strong>“Gotcha” No. 1:</strong> Simulating environment variables locally. There’s a lovely package on NPM called dotenv that I was able to set up to handle this. Create a <code class=\"highlighter-rouge\">.env</code> file in your project (and don’t version control it) that houses your variables. Your JavaScript is able to read <code class=\"highlighter-rouge\">process.env.VARIABLE_NAME</code> by running <code class=\"highlighter-rouge\">require('dotenv').config()</code>.</p> <p><strong>“Gotcha” No. 2:</strong> How do you post to a Netlify form? As it turns out, you can post to any URL on your site as long as you have the proper form name.</p> <p>The rest of what’s happening in this code is a POST request using the Node “request” module to send our data to our form.</p> <p><strong>“Gotcha No. 3:</strong> In order for Netlify to understand our POST, our site has to have an HTML form with this name. Netlify uses the HTML in your repository to figure out what processing your site needs.</p> <p>The site can handle this with a single route for all its forms. In this repository, I’m using a form-stub.html which isn’t linked anywhere.</p> <p>In this example, we’re using Netlify’s form system as a database. You could create a third-party database with Firebase or a similar tool. In my case, I wanted to use as few third-parties as possible.</p> <h2 id=\"using-the-data-in-our-site\">Using the data in our site</h2> <p>Most static site generators have some way of dealing with data files. In Jekyll, if you put JSON files in a <code class=\"highlighter-rouge\">_data</code> directory, you gain access to those variables in your templates.</p> <p>We’ll be requesting this data during the build process, so we need to utilize a task runner for this. My current tool of choice for tasks is GulpJS.</p> <p>In this example, we use two Gulp tasks: one for building our data and one for downloading the images.</p> <h3 id=\"getting-the-data-from-netlify\">Getting the data from Netlify</h3> <p>Before we can use the data, we’ve got to fetch it. Netlify provides a handy API for dealing with their forms. There’s a lovely GET method that will return the form submissions. This allows us to use the form functionality as a database for these updates.</p> <p>Using this data, we’ll create a JSON file in <code class=\"highlighter-rouge\">_data</code> to store our information.</p> <p>To lower complexity for this example, we’ll clean the previous file first. To do this, we’ll use <code class=\"highlighter-rouge\">fs.truncate</code> to truncate the file to 0 characters.</p> <figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">function</span> <span class=\"nx\">cleanFile</span><span class=\"p\">(</span><span class=\"nx\">filePath</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">truncate</span><span class=\"p\">(</span><span class=\"nx\">filePath</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Once we have our file cleaned, we need to create the new data from the API request’s body. We use Array.map() to create a the object for each status as expected by our Jekyll templates.</p> <figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">buildStatuses</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">let</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span> <span class=\"kd\">let</span> <span class=\"nx\">imgId</span> <span class=\"o\">=</span> <span class=\"nx\">getId</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">imgUrl</span><span class=\"p\">);</span> <span class=\"kd\">const</span> <span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">doing</span><span class=\"p\">,</span> <span class=\"na\">imgUrl</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">imgUrl</span><span class=\"p\">,</span> <span class=\"na\">localUrl</span><span class=\"p\">:</span> <span class=\"s2\">`/images/statusImages/</span><span class=\"p\">${</span><span class=\"nx\">imgId</span><span class=\"p\">}</span><span class=\"s2\">.jpg`</span><span class=\"p\">,</span> <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">created_at</span> <span class=\"p\">};</span> <span class=\"k\">return</span> <span class=\"nx\">status</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Once we have the data how we want it, we’ll use fs.writeFileSync() to write this array to our data file.</p> <figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFileSync</span><span class=\"p\">(</span><span class=\"nx\">statusFile</span><span class=\"p\">,</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">statuses</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Status data saved.\"</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">statusFile</span><span class=\"p\">}</span><span class=\"s2\"> rebuilt from data`</span><span class=\"p\">);</span></code></pre></figure> <p>Note: I’m utilizing synchronous versions of <code class=\"highlighter-rouge\">fs</code> module functions. This made the process a bit easier and clearer.</p> <p>I’m also using environment variables again to protect the form ID as well as my API key. Remember to always keep your sensitive data in these variables and not in your repo.</p> <p>The finished Gulp task looks like this:</p> <figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">'status:get'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// URL for data store</span> <span class=\"kd\">let</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"s2\">`https://api.netlify.com/api/v1/forms/</span><span class=\"p\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">STATUS_FORM_ID</span><span class=\"p\">}</span><span class=\"s2\">/submissions/?access_token=</span><span class=\"p\">${</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">API_AUTH</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span> <span class=\"kd\">let</span> <span class=\"nx\">statusFile</span> <span class=\"o\">=</span> <span class=\"s2\">`./_data/statuses.json`</span><span class=\"p\">;</span> <span class=\"nx\">cleanFile</span><span class=\"p\">(</span><span class=\"nx\">statusFile</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// Erases JSON file</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">statusFile</span><span class=\"p\">}</span><span class=\"s2\"> cleaned`</span><span class=\"p\">);</span> <span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// console.log(body);</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">err</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">===</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">let</span> <span class=\"nx\">bodyArray</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">);</span> <span class=\"kd\">let</span> <span class=\"nx\">statuses</span> <span class=\"o\">=</span> <span class=\"nx\">bodyArray</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">buildStatuses</span><span class=\"p\">);</span> <span class=\"c1\">// Write the status to a data file</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFileSync</span><span class=\"p\">(</span><span class=\"nx\">statusFile</span><span class=\"p\">,</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">statuses</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Status data saved.\"</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">});</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">statusFile</span><span class=\"p\">}</span><span class=\"s2\"> rebuilt from data`</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Couldn't get statuses from Netlify\"</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">});</span> <span class=\"p\">});</span> <span class=\"p\">});</span></code></pre></figure> <h3 id=\"bonus-download-the-images-to-the-project-via-imgur\">Bonus: Download the images to the project via Imgur</h3> <p>Now that we have the data, we can write a function to fetch the images and store them locally. This will cut down on reliance of a third-party website to serve static content.</p> <p>First, we need to determine all the images we need from the data. To do that, we’ll read the statuses.json file and grab the image IDs from the data.</p> <figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">imageNeeds</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// Creates array of all image IDs in JSON file</span> <span class=\"kd\">let</span> <span class=\"nx\">idList</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">'_data/statuses.json'</span><span class=\"p\">,</span> <span class=\"s1\">'utf8'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">contents</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">statuses</span><span class=\"p\">;</span> <span class=\"p\">});</span> <span class=\"kd\">let</span> <span class=\"nx\">jsonEncoded</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">idList</span><span class=\"p\">);</span> <span class=\"kd\">const</span> <span class=\"nx\">statusImageIds</span> <span class=\"o\">=</span> <span class=\"nx\">jsonEncoded</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">status</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"kd\">let</span> <span class=\"nx\">split</span> <span class=\"o\">=</span> <span class=\"nx\">status</span><span class=\"p\">.</span><span class=\"nx\">imgUrl</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"nx\">split</span><span class=\"p\">[</span><span class=\"nx\">split</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"p\">});</span> <span class=\"k\">return</span> <span class=\"nx\">statusImageIds</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> </code></pre></figure> <p>From there, we could just download each image from Imgur to our project. When we have a lot of statuses, that could end up taking a long time.</p> <p>To help mitigate that, I let this process run locally when I’m working on my site and then push the images to GitHub.</p> <p>Then, I can compare the image IDs I need to what files already exist and only download the latest.</p> <figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">currentlyDownloaded</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// Creates array of images currently in the project</span> <span class=\"kd\">const</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"s1\">'./images/statusImages'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">files</span><span class=\"p\">;</span> <span class=\"p\">});</span> <span class=\"kd\">const</span> <span class=\"nx\">imageIds</span> <span class=\"o\">=</span> <span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">imageUrl</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">imageUrl</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"s1\">'.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">));</span> <span class=\"k\">return</span> <span class=\"nx\">imageIds</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"kd\">const</span> <span class=\"nx\">imageIdList</span> <span class=\"o\">=</span> <span class=\"nx\">imageNeeds</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">downloadedIdList</span> <span class=\"o\">=</span> <span class=\"nx\">currentlyDownloaded</span><span class=\"p\">();</span> <span class=\"c1\">// Filters IDs to find images we need to download</span>\n<span class=\"kd\">let</span> <span class=\"nx\">needToDownload</span> <span class=\"o\">=</span> <span class=\"nx\">imageIdList</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">!</span> <span class=\"nx\">downloadedIdList</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n<span class=\"p\">});</span> <span class=\"nx\">needToDownload</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">fileId</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"kd\">let</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"s2\">`https://imgur.com/download/</span><span class=\"p\">${</span><span class=\"nx\">fileId</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span> <span class=\"kd\">let</span> <span class=\"nx\">fileName</span> <span class=\"o\">=</span> <span class=\"s2\">`./images/statusImages/</span><span class=\"p\">${</span><span class=\"nx\">fileId</span><span class=\"p\">}</span><span class=\"s2\">.jpg`</span> <span class=\"nx\">download</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">fileName</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Downloaded </span><span class=\"p\">${</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span> <span class=\"p\">})</span>\n<span class=\"p\">});</span></code></pre></figure> <h3 id=\"writing-a-jekyll-template-to-use-the-data\">Writing a Jekyll template to use the data</h3> <p>Jekyll has access to JSON data built directly into its templates. By utilizing <code class=\"highlighter-rouge\">site.data.&lt;filename&gt;</code>, we gain access to the data either as an array to loop through or an object to pull data from.</p> <p>In our case, we’ll loop through the data as an array using <code class=\"highlighter-rouge\">for status in site.data.statuses</code>.</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;article</span> <span class=\"na\">class=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;p&gt;&lt;/p&gt;</span> <span class=\"nt\">&lt;/article&gt;</span> </code></pre></figure> <h2 id=\"setting-up-the-build-and-serve-functions\">Setting up the build and serve functions</h2> <p>Once we have everything configured the way we want, we need tell Gulp the order to run our commands. In this case, we want a development serving command and a production <code class=\"highlighter-rouge\">build</code> command.</p> <figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">runSequence</span><span class=\"p\">(</span><span class=\"s1\">'status:get'</span><span class=\"p\">,</span> <span class=\"s1\">'image:get'</span><span class=\"p\">,</span> <span class=\"s1\">'serve:jekyll'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span> <span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">'build'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">runSequence</span><span class=\"p\">(</span><span class=\"s1\">'status:get'</span><span class=\"p\">,</span> <span class=\"s1\">'image:get'</span><span class=\"p\">,</span> <span class=\"s1\">'build:jekyll'</span><span class=\"p\">,</span> <span class=\"s1\">'lambda:build'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span></code></pre></figure> <p>The main differences in these commands are serving vs building Jekyll and adding Netlify’s lambda build command to the build functionality.</p> <p>The <code class=\"highlighter-rouge\">lambda:build</code> function runs a shell command for the Netlify-lambda-cli package.</p> <p><code class=\"highlighter-rouge\">netlify-lambda build lambda_build</code></p> <p>In this instance <code class=\"highlighter-rouge\">lambda_build</code> is the name of the directory in which our lambda function’s source exists. The source then gets published to the <code class=\"highlighter-rouge\">functions</code> directory which Netlify is expecting.<br />\nFor local testing, you can run <code class=\"highlighter-rouge\">netlify-lambda server lambda_build</code> and it will run a server for you.</p> <h2 id=\"where-to-go-from-here\">Where to go from here?</h2> <p>I believe the future is in static architecture. This is a small snapshot at building that future.</p> <p>There’s a lot of things in this project that felt a little wonky. They felt that way because my brain is used to thinking of things in terms of server code. Once I got past that, I felt POWERFUL.</p> <p>This seems ridiculous in some ways, but there’s immense power to be hand by offloading your server to someone else. There’s immense performance by handling all pages as static HTML.</p> <p>It’s an interesting time to be doing this work. What would you build in this workflow?</p>","link":"https://bryanlrobinson.com/blog/2018/11/12/ios-shortcuts-pushing-data-to-netlify-static-site/","url":"https://bryanlrobinson.com/blog/2018/11/12/ios-shortcuts-pushing-data-to-netlify-static-site/","created":1541980800000},{"title":"Top 3 uses for the &#58;&#58;before and &#58;&#58;after CSS pseudo elements","description":"<p>It’s no secret that I’m a fan of ::before and ::after pseudo-elements. I use them to great effect for <a href=\"/blog/2018/04/30/how-to-css-after-elements-for-background-overlays/\">creating darkened overlays in this previous post</a>.</p> <p>They have so many uses beyond that, though. This post outlines my three favorite uses outside of overlays.</p> <p>But first a quick explainer for how pseudo-elements work.</p> <h2 id=\"note-on-actually-using-after-and-before\">Note on actually using ::after and ::before</h2> <p>The browser will render these elements as “generated content” if and only if they have a value for the <code class=\"highlighter-rouge\">content</code> property. This value can be set to a blank string: <code class=\"highlighter-rouge\">content: \"\";</code>.</p> <p>When the browser inserts this element into the DOM, it inserts it INSIDE the element you use for the selector. Here’s the definition from the specification:</p> <blockquote> <p><strong>::before</strong> Represents a styleable child pseudo-element immediately before the <em>originating element</em>’s actual content.</p>\n</blockquote> <blockquote> <p><strong>::after</strong> Represents a styleable child pseudo-element immediately after the <em>originating element</em>’s actual content.</p>\n</blockquote> <p>By default, this new element will be an inline element. After the element is inserted into the DOM, it can be modified like any other element. This gives us lots of control to have all sorts of fun.</p> <p><em>Important Note: Not all browser/screen reader combinations can read what you place inside the <code class=\"highlighter-rouge\">content</code> of your pseudo-element. This should only be used for stylistic elements. True content should always be added to your page’s markup.</em></p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h2 id=\"adding-an-icon-next-to-certain-types-of-links\">Adding an icon next to certain types of links</h2> <p>If you want to give your users a little more visual information about what link is about to do, you can use ::after to add an icon without adding markup.</p> <p>Add an “external link” icon to links that aren’t absolute links.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">a</span><span class=\"o\">[</span><span class=\"nt\">href</span><span class=\"o\">^=</span><span class=\"s1\">\"http\"</span><span class=\"o\">]</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"sx\">url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/161359/open-in-new.svg)</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">background-size</span><span class=\"p\">:</span> <span class=\"n\">contain</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">content</span><span class=\"p\">:</span><span class=\"s1\">\"\"</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">inline-block</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">vertical-align</span><span class=\"p\">:</span> <span class=\"nb\">middle</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>In this code, we find any anchor tag that has an href element that begins with http. This assumes you write your internal links as relative paths.</p> <p>Another good use case for this method would be for PDFs.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">a</span><span class=\"o\">[</span><span class=\"nt\">href</span><span class=\"err\">$</span><span class=\"o\">=</span><span class=\"s1\">\".pdf\"</span><span class=\"o\">]</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\" (pdf)\"</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"err\"> </span><span class=\"m\">.8em</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">tomato</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>For any href that ends in .pdf, we can append the string “ (pdf).” This ::after element is easier to control than the image, as we’ve got full CSS control and can adjust font size, color and any other property.</p> <p>For more information on the black magic of these selectors, <a href=\"https://css-tricks.com/attribute-selectors/\">read this awesome primer on CSS-Tricks</a>.</p> <p><a href=\"https://codepen.io/brob/pen/zLJRjQ?editors=1100\">Play with these on CodePen</a></p> <h2 id=\"adding-interesting-borders-to-containers\">Adding interesting “borders” to containers</h2> <p><img src=\"/images/pseudo-element-full-border.png\" alt=\"Full Gradient border\" /></p> <p>Until the <a href=\"https://developers.google.com/web/updates/2018/01/paintapi\">Houdini Paint API</a> hits all browsers, you may feel stuck with very boring borders for your elements. Using simple CSS and ::before and ::after, you can bring some interesting ideas to all browsers.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.related-article</span> <span class=\"p\">{</span> <span class=\"err\"> </span>\n<span class=\"err\"> </span><span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">120deg</span><span class=\"p\">,</span><span class=\"m\">#eaee44</span><span class=\"p\">,</span><span class=\"m\">#33d0ff</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"nc\">.related-article</span> <span class=\"o\">*</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"err\">//</span> <span class=\"err\">Set</span> <span class=\"err\">stacking</span> <span class=\"err\">context</span> <span class=\"err\">to</span> <span class=\"err\">keep</span> <span class=\"err\">content</span> <span class=\"err\">on</span> <span class=\"err\">top</span> <span class=\"err\">of</span> <span class=\"err\">the</span> <span class=\"err\">background</span>\n<span class=\"p\">}</span> <span class=\"nc\">.related-article</span><span class=\"nd\">::before</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"n\">-</span> <span class=\"m\">20px</span><span class=\"p\">);</span>\n<span class=\"err\"> </span><span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"n\">-</span> <span class=\"m\">20px</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <p>In this example, we apply a background gradient to the parent element and use a ::before element to “cut out” the interior with a simple background color. This gives the appearance of a border despite being two rectangles. To get the sizing right for your border, just requires some simple math.</p> <p>By positioning the pseudo-element absolute, we have control over its placement. Sass can make this math easier with variables and math functions, if that strikes your fancy.</p> <p><a href=\"https://codepen.io/brob/pen/JBmKqN?editors=1100\">Play with this on CodePen</a></p> <p>Instead of a full border, what if we want our headlines to have fancy small borders underneath them?</p> <figure style=\"position: relative; width: 100%; height: 0; padding-bottom: 56.25%; margin-bottom: 1rem;\"> <iframe width=\"560\" height=\"315\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://www.youtube.com/embed/_Vtvc0JIgQ8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n</figure> <p>We can use an ::after element to accomplish that.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.cool-border</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">7px</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">120deg</span><span class=\"p\">,</span> <span class=\"m\">#e5ea15</span><span class=\"p\">,</span> <span class=\"m\">#00c4ff</span><span class=\"p\">);</span>\n<span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100%</span> <span class=\"err\">+</span> <span class=\"m\">5px</span><span class=\"p\">);</span>\n<span class=\"err\"> </span><span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">45%</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">-50%</span><span class=\"p\">)</span> <span class=\"n\">skew</span><span class=\"p\">(</span><span class=\"m\">-50deg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"nc\">.cool-border</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>In this example, we also position a pseudo element absolute. The size of our “border” is dictated by the height of the new element. If this were a right or left “border” you would use the elements width to determine the size.</p> <p>Since this is just an element on the page, we can also have our border skewed. Rectangles were so 2005!</p> <p><a href=\"https://codepen.io/brob/pen/jpawRd?editors=1100\">Play with this on CodePen</a></p> <h2 id=\"adding-stylistic-elements-that-you-dont-want-add-markup-for\">Adding stylistic elements that you don’t want add markup for</h2> <p>A <code class=\"highlighter-rouge\">&lt;blockquote&gt;</code> is a great semantic element. Let’s not ruin it with extra markup.</p> <p>In many ::after examples (including the others on this post), you see the pseudo elements <code class=\"highlighter-rouge\">position: absolute</code>. There’s no rule that says this has to be the case.</p> <p>Let’s use ::before and ::after as grid-items to place quotation marks on a <code class=\"highlighter-rouge\">&lt;blockquote&gt;</code>.</p> <p>By explicitly placing all of our content on the grid, we don’t have to worry about extra wrappers. We can also use the quotes as background images and allow them to scale with a simple <code class=\"highlighter-rouge\">minmax</code> function in our <code class=\"highlighter-rouge\">grid-template-columns</code>.</p> <iframe height=\"400\" scrolling=\"no\" title=\"Blockquote quotations with ::before and ::after elements\" src=\"//codepen.io/brob/embed/QBZKVE/?height=413&amp;theme-id=26704&amp;default-tab=css,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%; grid-column: 2 / 7;\">See the Pen <a href=\"https://codepen.io/brob/pen/QBZKVE/\">Blockquote quotations with ::before and ::after elements</a> by Bryan Robinson (<a href=\"https://codepen.io/brob\">@brob</a>) on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe> <h2 id=\"what-am-i-missing\">What am I missing?</h2> <p>There are a lot of great ideas for using ::after and ::before. What am I missing? Have you been using pseudo-elements in your day-to-day development?</p>","link":"https://bryanlrobinson.com/blog/2018/08/07/top-3-uses-of-after-and-before-css-pseudo-elements/","url":"https://bryanlrobinson.com/blog/2018/08/07/top-3-uses-of-after-and-before-css-pseudo-elements/","created":1533600000000},{"title":"How To&#58; Use CSS Grid to Mix and Match Design Patterns","description":"<p>In a previous tutorial, I described <a href=\"/blog/2017/07/26/howto-css-grid-layout-to-make-a-simple-fluid-card-grid/\">how to create a simple fluid card grid with CSS Grid</a>. In this tutorial, we’ll take it a step further and create promotional spaces that morph in interesting ways.</p> <p>Using Grid, we’ll gain the following advantages:</p> <ul> <li>Semantic, un-nested HTML</li> <li>Images as actual accessible content and not background images</li> <li>Mobile-first design with simple breakpoint changes</li> <li>Different design patterns that match the advantages of the device used</li>\n</ul> <p>To do this, we’ll use: </p> <ul> <li>Well-formed HTML</li> <li>Grid’s ease of overlap</li> <li>Named Grid Lines and Named Grid Areas</li>\n</ul> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h2 id=\"the-design\">The design</h2> <p><img src=\"/images/responsive-grid-break-design.jpg\" alt=\"Design on multiple screens\" /></p> <p>We’ll be setting up three different designs for our promo space.</p> <p>On mobile, we’ll have an image with a darkened overlay in the background and the text and button in the foreground.</p> <p>On larger screens – tablets and landscape mobile phones – we’ll use the same promo design but have them two across.</p> <p>On devices bigger than tablets, we’ll have a full row for each promo with the image beside the text and no overlay.</p> <h2 id=\"the-markup\">The markup</h2> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"promos\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"promo\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;h3</span> <span class=\"na\">class=</span><span class=\"s\">\"promo__headline\"</span><span class=\"nt\">&gt;</span>This is a headline for a promo space<span class=\"nt\">&lt;/h3&gt;</span> <span class=\"nt\">&lt;img</span> <span class=\"na\">class=</span><span class=\"s\">\"promo__image\"</span> <span class=\"na\">src=</span><span class=\"s\">\"https://images.unsplash.com/photo-1521379770009-7bafd3ec7a23?ixlib=rb-0.3.5&amp;q=85&amp;fm=jpg&amp;crop=entropy&amp;cs=srgb&amp;ixid=eyJhcHBfaWQiOjE0NTg5fQ&amp;s=ce4848266618366ad30d7d35764c0bf4\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Ocean Scape\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"promo__text\"</span><span class=\"nt\">&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ac arcu mollis, semper est ac, tincidunt purus. Cras efficitur maximus augue vitae volutpat. Nullam consectetur diam a dictum facilisis. <span class=\"nt\">&lt;/p&gt;</span> <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span> <span class=\"na\">class=</span><span class=\"s\">\"promo__button\"</span><span class=\"nt\">&gt;</span>Learn More <span class=\"ni\">&amp;raquo;</span><span class=\"nt\">&lt;/a&gt;</span> <span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"promo\"</span><span class=\"nt\">&gt;</span> ... etc <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span></code></pre></figure> <p>Sweet and simple. One parent container for the promos and one child container per promo. Inside that, we’ve got our content. A <code class=\"highlighter-rouge\">h2/3/4</code>, <code class=\"highlighter-rouge\">p</code>, <code class=\"highlighter-rouge\">a</code> and an <code class=\"highlighter-rouge\">img</code>. That’s right, we’re using an <code class=\"highlighter-rouge\">&lt;img&gt;</code> tag for a background image. </p> <p>If you consider your image to be part of your content and not there for ambiance, then using an <code class=\"highlighter-rouge\">&lt;img&gt;</code> tag is the proper, semantic way to write it. We’ll see in the next section how we make it appear to be a background image.</p> <h2 id=\"crafting-our-initial-grid\">Crafting our initial grid</h2> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.promo</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"m\">10vh</span> <span class=\"nb\">repeat</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"nb\">auto</span><span class=\"p\">)</span> <span class=\"m\">10vh</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"m\">10vh</span> <span class=\"nb\">auto</span> <span class=\"nb\">auto</span> <span class=\"nb\">auto</span> <span class=\"m\">10vh</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-areas</span><span class=\"p\">:</span> <span class=\"s2\">'....'</span> <span class=\"s2\">'headline'</span> <span class=\"s2\">'text'</span> <span class=\"s2\">'button'</span> <span class=\"s2\">'....'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.promo__headline</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"py\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">headline</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">align-self</span><span class=\"p\">:</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.promo__text</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"py\">grid-area</span><span class=\"p\">:</span> <span class=\"nb\">text</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"err\"> </span>\n<span class=\"nc\">.promo__button</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"py\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">button</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Here’s where the power starts. We’re going to define our grid with one column and five rows.</p> <p>The five rows allow for us to vertically center our content. The first and last rows will be blank, but have an equal height set. Each of the middle three rows is sized by its content with the <code class=\"highlighter-rouge\">auto</code> keyword.</p> <p>Finally, we tell the browser where to put our content by assigning a grid area name in <code class=\"highlighter-rouge\">grid-template-areas</code>. We then assign <code class=\"highlighter-rouge\">headline</code>, <code class=\"highlighter-rouge\">text</code>, and <code class=\"highlighter-rouge\">button</code> keywords to the classes of content that match. </p> <p>In this declaration, each row is represented by one string with columns separated by spaces. In this case, there’s only one column and five rows. The first and last rows are represented by one or more periods. This allows for these grid cells to be blank. </p> <p>One quick note: By assigning <code class=\"highlighter-rouge\">align-self: end</code> to our headline, we create a stronger tie between headline and text.</p> <h2 id=\"converting-the-image-to-a-background\">Converting the image to a background</h2> <p>At this point, you may have noticed we haven’t styled our <code class=\"highlighter-rouge\">&lt;img&gt;</code>. </p> <p>To make the image span the full height and width our container, we need to tell it to fill all the rows. We could use <code class=\"highlighter-rouge\">grid-row: 1 / 6</code> but then we’d need to redefine this at various breakpoints.</p> <p>The current specification of Grid doesn’t account for overlap in grid-template-areas. So, we’ll create “named lines” instead by redefining our grid-template-columns and -rows.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.promo</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">image-start</span><span class=\"p\">]</span> <span class=\"m\">1</span><span class=\"n\">fr</span> <span class=\"p\">[</span><span class=\"n\">image-end</span><span class=\"p\">];</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">image-start</span><span class=\"p\">]</span> <span class=\"m\">10vh</span> <span class=\"nb\">auto</span> <span class=\"nb\">auto</span> <span class=\"nb\">auto</span> <span class=\"m\">10vh</span> <span class=\"p\">[</span><span class=\"n\">image-end</span><span class=\"p\">];</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Three big things are happening here:</p> <ol> <li>A string inside of brackets <code class=\"highlighter-rouge\">[image-start]</code> creates a named line.</li> <li>Two named lines containing <code class=\"highlighter-rouge\">-start</code> and <code class=\"highlighter-rouge\">-end</code> will create a named area.</li> <li>Two named lines in rows and two named lines in columns create a two-dimensional grid area.</li>\n</ol> <p>By defining these four lines, we can now call <code class=\"highlighter-rouge\">grid-area: image</code> on our image and it will fill the entire promo.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.promo__image</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"py\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">image</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">align-self</span><span class=\"p\">:</span> <span class=\"n\">stretch</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">object-fit</span><span class=\"p\">:</span> <span class=\"n\">cover</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <aside class=\"reference\" style=\"grid-row: span 2;\"> The default value <code class=\"highlighter-rouge\">normal</code> is much like <code class=\"highlighter-rouge\">stretch</code> but doesn't affect things with intrinsic aspect ratios like images.</aside> <p>You’ll note two other properties: <code class=\"highlighter-rouge\">align-self</code> and <code class=\"highlighter-rouge\">object-fit</code>.</p> <p>Align-self will allow the image to fill the entire grid cell. By allowing the image to stretch, it fills the space. Object-fit and the keyword <code class=\"highlighter-rouge\">cover</code> allow an <code class=\"highlighter-rouge\">&lt;img&gt;</code> tag to have the same functionality as <code class=\"highlighter-rouge\">background-size: cover</code>.</p> <h2 id=\"add-the-overlay-with-mix-blend-modes\">Add the overlay with mix-blend-modes</h2> <figure class=\"reference\" style=\"grid-row: span 5; justify-self: end;\"> <img src=\"/images/mobile-responsive-grid.jpg\" alt=\"The mobile design\" />\n</figure> <p>Normally, <a href=\"/blog/2018/04/30/how-to-css-after-elements-for-background-overlays/\">I’d advocate for an ::after element in CSS to handle the darkened overlay</a>. In this instance, because our main background is an <code class=\"highlighter-rouge\">&lt;img&gt;</code> tag, an <code class=\"highlighter-rouge\">::after</code> element won’t work.</p> <p>To address this, we can add a <code class=\"highlighter-rouge\">background-color</code> to the entire promo area and use <code class=\"highlighter-rouge\">mix-blend-mode</code> on the image to blend the two.</p> <p>To avoid blending all the elements, we can add a z-index to affect our stacking context. By giving our image a z-index of 0 and our text elements a z-index of 1 (or more), only the image and background color will be blended.</p> <h2 id=\"add-a-breakpoint-for-tablets-and-large-phones\">Add a breakpoint for tablets and large phones</h2> <p>This is the easy part. For larger phones and tablets, let’s set a breakpoint to put our promos side-by-side.</p> <p>In this example, we have two promos, so we’ll set our grid to two columns. If you have dynamic content, you could explore creating a fluid card grid.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"p\">:</span> <span class=\"m\">640px</span><span class=\"p\">)</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">1024px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nc\">.promos</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"n\">fr</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"py\">grid-gap</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure> <figure class=\"reference\" style=\"grid-row: span 4;\"> <img src=\"/images/responsive-just-desktop.jpg\" />\n</figure> <h2 id=\"now-for-the-fun-desktop-reconfiguration\">Now for the fun: desktop reconfiguration</h2> <p>Tablets were easy: Add an extra column. Done. For desktop, let’s create a row for each promo and let them breathe a bit.</p> <p>To build our new grid template, all we need to do is add a column and adjust our grid-template-areas.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"> <span class=\"nt\">grid-template-columns</span><span class=\"o\">:</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span><span class=\"o\">;</span> <span class=\"nt\">grid-template-areas</span><span class=\"o\">:</span> <span class=\"s2\">'....... image'</span> <span class=\"s2\">'headline image'</span> <span class=\"s2\">' text image'</span> <span class=\"s2\">' button image'</span> <span class=\"s2\">'....... image'</span><span class=\"o\">;</span> <span class=\"nt\">grid-column-gap</span><span class=\"o\">:</span> <span class=\"nt\">20px</span><span class=\"o\">;</span></code></pre></figure> <p>Since we named our grid areas, they’ll automatically flow into their new homes.</p> <p>With our grid now in place, let’s make a few stylistic choices to solidify this design.</p> <p>Let’s add a little white space on either side of our promos by setting a width and auto margins.</p> <p>We’ll also reset our font color and background color for the promos to values that make sense for the space the promos take up and align the text left instead of center.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"err\"> </span><span class=\"nc\">.promos</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">95vw</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n<span class=\"err\"> </span><span class=\"p\">}</span>\n<span class=\"err\"> </span><span class=\"nc\">.promo</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">transparent</span><span class=\"p\">;</span> <span class=\"err\">//</span> <span class=\"err\">Turns</span> <span class=\"err\">background</span> <span class=\"err\">color</span> <span class=\"err\">off</span>\n<span class=\"err\"> </span><span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span> <span class=\"err\">//</span> <span class=\"err\">Inverts</span> <span class=\"err\">text</span> <span class=\"err\">color</span>\n<span class=\"err\"> </span><span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">left</span><span class=\"p\">;</span> <span class=\"err\">//</span> <span class=\"err\">My</span> <span class=\"err\">preference</span> <span class=\"err\">for</span> <span class=\"err\">this</span> <span class=\"err\">style</span> <span class=\"err\">of</span> <span class=\"err\">promo</span>\n<span class=\"err\"> </span><span class=\"p\">}</span></code></pre></figure> <h2 id=\"alternate-image-and-text-location-on-promos\">Alternate image and text location on promos</h2> <p>If you’re anything like me, it bothers you to see those images repeating down the right side of the screen. We can fix this with the addition of a class and one more grid-template-area reset.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.promo.even</span> <span class=\"p\">{</span> <span class=\"py\">grid-template-areas</span><span class=\"p\">:</span> <span class=\"s2\">'image ....'</span> <span class=\"s2\">'image headline'</span> <span class=\"s2\">'image text'</span> <span class=\"s2\">'image button'</span> <span class=\"s2\">'image ....'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>With that, we have an interesting set of design patterns that best match the device on which they’re viewed. As always, <a href=\"https://codepen.io/brob/pen/dKWdVB?editors=1000\">you can play with the code on CodePen</a>.</p> <p>What are some other design patterns that would work well together with the power of Grid?</p>","link":"https://bryanlrobinson.com/blog/2018/06/13/how-to-use-css-grid-to-mix-and-match-design-patterns/","url":"https://bryanlrobinson.com/blog/2018/06/13/how-to-use-css-grid-to-mix-and-match-design-patterns/","created":1528848000000},{"title":"How To&#58; Use CSS &#58;after pseudo-elements to create simple overlays","description":"<aside class=\"reference\"> <p>Looking for more uses of ::after and ::before? <a href=\"/blog/2018/08/07/top-3-uses-of-after-and-before-css-pseudo-elements/\">Read my Top 3 Uses beyond the overlay</a></p>\n</aside> <figure style=\"position: relative; width: 100%; height: 0; padding-bottom: 56.25%; margin-bottom: 1rem;\"> <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SXQ9l0ScDEA?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe> </figure> <p>More and more in web design, we find ourselves putting text on top of images. More often than not, this is a dangerous game. Images have dynamic color and lighting and text for the most part is one color. This is often a nightmare for readability and accessibility.</p> <p>This means we want to introduce an overlay to sit between the image and the text. Sometimes this darkens the background image enough for readability. Other times it’s a branding opportunity. Either way we need a simple CSS technique to introduce this sort of overlay.</p> <p>Since I prefer not to introduce new markup for an embelishment, we’ll use the CSS <code class=\"highlighter-rouge\">::after</code> pseudo-element.</p> <p>The process looks something like this:</p> <ol> <li>Create the simplest HTML for your area</li> <li>Use a <code class=\"highlighter-rouge\">::before</code> or <code class=\"highlighter-rouge\">::after</code> element to create your banner</li> <li>Fix <code class=\"highlighter-rouge\">z-index</code> issues caused by absolute positioning</li> <li>Experiment with <code class=\"highlighter-rouge\">mix-blend-mode</code> for fun and profit</li>\n</ol> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h3 id=\"step-1-all-the-markup-you-need-none-of-the-bloat\">Step 1: All the markup you need, none of the bloat</h3>\n<figure style=\"grid-column: 1 / 3; grid-row: span 2;\"><img src=\"/images/overlay-starting-point.jpg\" alt=\"Grid Love\" /></figure> <p>In a banner, all we really want is the banner’s container and any content that banner needs to contain.</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"banner\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;h1&gt;</span>Hello World<span class=\"nt\">&lt;/h1&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span></code></pre></figure> <p>In this example, we’ll just utilize a section container and an <code class=\"highlighter-rouge\">&lt;h1&gt;</code>. If you added more content, it could be siblings to the <code class=\"highlighter-rouge\">&lt;h1&gt;</code> or you could place all of your content in a content container of some sort to do any positioning.</p> <p>A little CSS magic is happening here for the added height of the banner as well as the centering of the text. That’s not important for this demo, but if you’re curious, it exists in the CodePen.</p> <h3 id=\"step-2-add-the-overlay-element-dynamically-with-after\">Step 2: Add the overlay element dynamically with ::after</h3> <p>Natively, CSS gives us the powerful <code class=\"highlighter-rouge\">::before</code> and <code class=\"highlighter-rouge\">::after</code> elements for adding stylistic content to the page that shouldn’t affect markup.</p> <p>By apply <code class=\"highlighter-rouge\">::before</code> or <code class=\"highlighter-rouge\">::after</code> to an element, you can insert a dynamic element into the DOM before or after the selected elements children.</p> <p>One important note, all pseudo-elements require a <code class=\"highlighter-rouge\">content</code> CSS property to display. In our case, this will just be a blank string.</p> <figure style=\"grid-column: 1 / 3; grid-row: span 2;\"><img src=\"/images/overlay-somethings-not-right.jpg\" alt=\"Grid Love\" /></figure> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"err\">.</span><span class=\"na\">banner</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span> <span class=\"c1\">// ::before and ::after both require content</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"nf\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">120deg</span><span class=\"o\">,</span> <span class=\"mh\">#eaee44</span><span class=\"o\">,</span> <span class=\"mh\">#33d0ff</span><span class=\"p\">);</span> <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"mi\">.7</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Now we have an element that is full-width and -height. To do this, we utilize absolute positioning, as we don’t want to affect the content flow of the document.</p> <p>We make the overlay slightly transparent utilizing the <code class=\"highlighter-rouge\">opacity</code> property.</p> <p>In this example, I chose a fun gradient, but you could use a simple background color or even another image to overlay.</p> <h3 id=\"step-3-fix-z-index-issues\">Step 3: Fix z-index issues</h3> <p>The keen-eyed observer would notice that something isn’t quite right in the example. Our friendly overlay is covering not just the background image, but also the text in the banner.</p> <p>By using absolute positioning, we’ve actually put the overlay on top of the stacking context of our banner. To fix this, your overlay and your content will need to have a <code class=\"highlighter-rouge\">z-index</code> applied to them. I usually give the overlay a 1 and my content 100.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"err\">.</span><span class=\"na\">banner</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"err\">... </span><span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.banner</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"p\">{</span> <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">100</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <h4 id=\"and-with-that-we-have-a-finished-overlay\">And with that we have a finished overlay.</h4> <figure style=\"grid-column: 2 / 7;\"><img src=\"/images/overlay-finished.jpg\" alt=\"Grid Love\" /></figure> <h2 id=\"bonus-step-advanced-overlays-with-blend-modes\">Bonus step: Advanced overlays with blend modes</h2> <figure style=\"grid-column: 1 / 3; grid-row: span 5;\"><img src=\"/images/overlay-with-blend-mode.jpg\" alt=\"Grid Love\" /></figure> <p>I’ve been toying with background blend modes for a little while now, but it blew me away when I discovered <code class=\"highlighter-rouge\">mix-blend-mode</code>. This allows a developer to blend multiple elements together!</p> <p>Use <code class=\"highlighter-rouge\">mix-blend-mode</code> on your overlay and you’ve got some fun new combinations to try out.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"err\">.</span><span class=\"na\">banner</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"cm\">/* opacity: .7; */</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">color</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">hue</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">hard-light</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>The support for various blend modes are pretty weak in the Microsoft browsers, but you can still use them today with clever progressive enhancement. If you want them to be built in Edge, you can <a href=\"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer?query=blend\">let Microsoft know about your passion here</a>.</p> <p>Until that time, let’s use <code class=\"highlighter-rouge\">@supports</code> queries to make sure our code still respects our friends using Edge and IE. The above code removes the transparency from our overlay and lets the blend mode do it for us. Instead of removing it, let’s negate it behind a support query.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"err\">.</span><span class=\"na\">banner</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"p\">{</span> <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"mi\">.7</span><span class=\"p\">;</span> <span class=\"k\">@supports</span> <span class=\"o\">(</span><span class=\"nt\">mix-blend-mode</span><span class=\"nd\">:</span> <span class=\"nt\">hue</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">color</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">hard-light</span><span class=\"p\">;</span> <span class=\"na\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">hue</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure> <p>This way in browsers that don’t support blend modes, we get our average, but nice overlay and in browsers that do, we get some really neat effects on our banner.</p> <p>Overlays should be simple and clean and never bloat your HTML with additional markup. This is one of my favorite uses of <code class=\"highlighter-rouge\">::after</code> elements. It just makes so much sense.</p> <p>If you want to play with the code in this tutorial, the CodePen is embedded below:</p> <iframe height=\"400\" scrolling=\"no\" title=\"CSS ::after element overlays\" src=\"//codepen.io/brob/embed/bMqBgb/?height=265&amp;theme-id=dark&amp;default-tab=css,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%; grid-column: 1 / 7\">See the Pen <a href=\"https://codepen.io/brob/pen/bMqBgb/\">CSS ::after element overlays</a> by Bryan Robinson (<a href=\"https://codepen.io/brob\">@brob</a>) on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>","link":"https://bryanlrobinson.com/blog/2018/04/30/how-to-css-after-elements-for-background-overlays/","url":"https://bryanlrobinson.com/blog/2018/04/30/how-to-css-after-elements-for-background-overlays/","created":1525046400000},{"title":"Modern CSS&#58; Four Things Every Developer and Designer Should Know About CSS","description":"<h2 id=\"contrary-to-popular-belief-css-is-an-absolute-delight\">Contrary to popular belief, CSS is an absolute delight. </h2> <p>Many developers I talk to think the phrase “Modern CSS” is an oxymoron. If you haven’t been watching the growth and maturity of CSS in the past 5 years, you’re doing yourself a disservice. </p> <p>In this article, I’ll outline the four things that excite me every day about the state of CSS in 2018.</p> <h2 id=\"layout-is-no-longer-hard-with-css-grid-and-flexbox\">Layout is no longer hard with CSS Grid and Flexbox</h2> <p>Welcome to the new world order. Gone are the days of float-based layouts. Gone are the headaches of width calculations and hacks.</p> <p>Unlike floats, the Flex and Grid specifications were written specifically for complex and fluid designs. </p> <h3 id=\"flexbox\">Flexbox</h3> <p>The Flexible Box Module is a CSS Specification intended for fluid user interfaces. Take for example, the beginning of the Abstract from the specification:</p> <blockquote> <p><code class=\"highlighter-rouge\">The specification describes a CSS box model optimized for user interface design. In the flex layout model, the children of a flex container can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent.</code></p>\n</blockquote> <p>Flex makes layout of boxes in one direction uncomplicated. Beyond that, it codifies many of the design patterns we had used floats for. </p> <p>Want your three promotional spaces to always be the same height? The default value for <code class=\"highlighter-rouge\">align-items</code> is <code class=\"highlighter-rouge\">stretch</code> and makes this happen in zero lines of code.</p> <p><strong>Resources</strong></p> <ul> <li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS-Tricks’ A Complete Guide to Flexbox</a> - This is the definitive visual guide for what all the terms and properties mean. When I learned, I played with code and referenced this page.</li> <li><a href=\"https://medium.freecodecamp.org/an-animated-guide-to-flexbox-d280cf6afc35\">How Flexbox works — explained with big, colorful, animated gifs</a> - A simple visual introduction.</li> <li><a href=\"http://flexboxfroggy.com/\">Flexbox Froggy</a> - Flexbox Froggy is a fun and free game that teaches the core concepts of flex. This is a great start for those looking to learn via play.</li> <li><a href=\"https://geddski.teachable.com/p/flexbox-zombies\">Flexbox Zombies</a> - Flexbox Zombies has a little more production value than Froggy and a cool motif. This course used to be a paid resource, but now is free.</li> <li><a href=\"https://bryanlrobinson.com/blog/2016/05/02/flexbox-lets-start-simple/\">Flexbox: Let’s start simple</a> - My starting point blog post for folks looking to learn flex.</li>\n</ul> <h3 id=\"css-grid\">CSS Grid</h3> <p>In 2017, our industry saw one of the fastest and most streamlined implementations of a new browser feature. CSS Grid went from zero support to 100% modern browser support in under a year. This is huge.</p> <p>CSS Grid is a layout specification meant work together with Flexbox.</p> <p>Where Flexbox works from the content out, Grid works from the layout in.</p> <p>For the first time ever, we can specify a layout mode on the page and have our content reliably enter across TWO dimensions.</p> <p>It’s little secret that I love CSS Grid. The majority of the posts I make on this site are about it. </p> <p>If you’ve ever wanted to stretch content across multiple rows without additional markup, this is your time. </p> <p>If you’ve ever wanted to place content in specific areas without the drawbacks of absolute positioning, this is your time.</p> <p>If you’ve ever wanted to create refreshing, unique layouts, this is absolutely the time to be doing web design.</p> <p><strong>Resources</strong></p> <ul> <li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS Tricks’ A Complete Guide to Grid</a> - Much like their guide to Flexbox, this is a great representation of Grid’s properties and values.</li> <li><a href=\"https://gridbyexample.com/\">Grid by Example</a> - Rachel Andrew’s Grid by Example is a great resource for learning Grid … by examples.</li> <li><a href=\"https://css-tricks.com/five-design-fears-vanquish-css-grid/\">Five Design Fears to Vanquish with CSS Grid</a> - My article on CSS Tricks for the design promise of Grid.</li> <li><a href=\"http://jensimmons.com/post/feb-27-2017/learn-css-grid\">Learn CSS Grid</a> - An older collection of resources on CSS Grid compiled by the amazing Jen Simmons.</li> <li><a href=\"http://cssgridgarden.com/\">Grid Garden</a> - Learn the syntax of Grid with this fun browser game.</li> <li><a href=\"https://gridcritters.com/p/gridcritters\">Grid Critters</a> - Back for more from Flexbox Zombies, Dave Geddes created Grid Critters - a sci-fi grid mastery game. If you have an education budget, this is where you should spend it.</li>\n</ul> <h2 id=\"graphical-manipulation-is-possible-with-filters-and-blend-modes\">Graphical Manipulation is possible with filters and blend modes</h2> <p>Colors and effects used to be the purview of Photoshop or JavaScript. Now they’re a first-class citizen of CSS with filters and blend modes.</p> <p>With CSS Blend Modes, web developers now have an opportunity to use image manipulation blend modes such as multiply and screen.</p> <p>There are a lot of practical applications to this. There are also a lot of applications that will make designers very, very happy.</p> <p>While writing this post, I got sidetracked and made this fun little example:</p> <iframe style=\"width: 100%;\" height=\"400\" scrolling=\"no\" title=\"Fun with blend-mode use\" src=\"//codepen.io/brob/embed/pLRJgm/?height=300&amp;theme-id=26704&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/brob/pen/pLRJgm/\">Fun with blend-mode use</a> by Bryan Robinson (<a href=\"https://codepen.io/brob\">@brob</a>) on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p><br /></p> <p>CSS Filters give developers a load of image manipulation options. Some of my favorites are contrast and hue-rotate.</p> <p>From a practical perspective, there are quite a few hover state or overlay applications.</p> <p>I was tempted and made a fun hover state for an image in a few lines of code:</p> <iframe height=\"400\" scrolling=\"no\" title=\"Animate blur\" src=\"//codepen.io/brob/embed/ZxLywv/?height=300&amp;theme-id=26704&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/brob/pen/ZxLywv/\">Animate blur</a> by Bryan Robinson (<a href=\"https://codepen.io/brob\">@brob</a>) on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p><br /></p> <p><strong>Resources</strong></p> <ul> <li><a href=\"http://arttheweb.com/\">Art the Web</a> - A collection of tutorials, articles and talks about mixing blend modes and filters from the amazing mind of Una Kravets.</li> <li><a href=\"https://www.sarasoueidan.com/blog/compositing-and-blending-in-css/\">Compositing and Blending in CSS</a> - Sara Soueidan’s article on the art and science of using these tools.</li> <li><a href=\"https://css-tricks.com/basics-css-blend-modes/\">Basics of CSS Blend Modes</a> - Chris Coyier’s primer on blend modes.</li>\n</ul> <h2 id=\"guard-against-the-cascade-but-dont-forsake-it\">Guard against the cascade, but don’t forsake it</h2> <p>There are many thought pieces written about CSS. Many of them center around the global nature of the cascade (the “C” in “CSS).</p> <p>There’s a growing faction of developers who feel that the cascade has become a liability. It’s too easy for styles to bleed between components. I won’t argue that it IS easy for styles to leak in a global way, but the cascade is your friend.</p> <p>It’s sometimes your friend that gets you into trouble, but that can make the most memories.</p> <p>I won’t add to the thought piece clutter, except to say this:</p> <blockquote> <p>Using the cascade for sensible global styles is at the forefront of a maintainable website. Encapsulated styles for components that don’t depend on global styles is also extremely important.</p>\n</blockquote> <p>Finding the appropriate mix of global and scoped is the key. It’s also the key in many programming languages. </p> <p>I use a mix of strong, sensible global styles and BEM in my CSS. Other’s mileage may vary. Just remember, “Cascade” is not a dirty word.</p> <p><strong>Resources</strong></p> <ul> <li><a href=\"https://www.smashingmagazine.com/2016/11/css-inheritance-cascade-global-scope-new-old-worst-best-friends/\">CSS Inheritance, the Cascade and Global Scope</a> - I don’t agree with EVERYTHING in this post, but many of the points are what I try to drive home regularly.</li> <li><a href=\"http://getbem.com/\">BEM’s site</a></li>\n</ul> <h2 id=\"css-selectors-are-more-powerful-than-you-know\">CSS Selectors are more powerful than you know</h2> <p>I was chatting with a developer friend of mine a few months back. He was working through an issue in his CSS. Someone who is a great developer and quite good at CSS.</p> <p>He wanted the ability in SASS to specify that an element didn’t meet a certain criteria.</p> <p>“You know if this element is a .X but NOT .Y,” he said.</p> <p>I looked at him a little confused. “What do you mean?”</p> <p>He explained again. </p> <p>“Well, I don’t know about SASS on this, but have you tried a CSS :not selector?”</p> <p>All this to say CSS is a HUGE area of expertise and even talented developers miss functionality.</p> <p>In 2018, CSS selectors are more than element selectors, ID selectors and class selectors.</p> <p>The :not selector is a great exclusionary selector. When you want all list items that are NOT active</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">li</span><span class=\"nd\">:not</span><span class=\"o\">(</span><span class=\"nc\">.active</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n<span class=\"err\"> </span><span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Sibling selectors are also quite powerful. There are adjacent siblings (siblings next to each other in the source) and general siblings (may be seperated by other siblings).</p> <p>I use sibling selectors in this <a href=\"https://bryanlrobinson.com/blog/2017/08/02/css-only-mobile-slide-out-navigation/\">example of a CSS-only mobile navigation</a>. Adjacent siblings are the basis for the “lobotomized owl” reset pattern <code class=\"highlighter-rouge\">* + *</code></p> <p>If you’re only using classes to select you’re missing out on some fun.</p> <p><strong>Resources</strong></p> <ul> <li><a href=\"https://flukeout.github.io/\">CSS Diner</a> - A fun learning game for all the CSS selector types.</li> <li><a href=\"https://css-tricks.com/almanac/\">CSS Tricks Almanac</a> - The CSS Tricks Almanac has a page for every single selector.</li> <li><a href=\"https://css-tricks.com/useful-nth-child-recipies/\">Useful :nth-child Recipes</a> - I use :nth-child a LOT. This handy article gives some typical patterns to use.</li>\n</ul> <h2 id=\"css-is-wonderful\">CSS is Wonderful</h2> <p>CSS in 2018 is fun. It’s wonderful. If you’re not enjoying CSS right now, you’re not having enough fun in your work.</p> <p>What are your favorite pieces of Modern CSS?</p>","link":"https://bryanlrobinson.com/blog/2018/03/19/modern-css-four-things-every-developer-should-know-about-css/","url":"https://bryanlrobinson.com/blog/2018/03/19/modern-css-four-things-every-developer-should-know-about-css/","created":1521417600000},{"title":"3 Strategies for Getting Started with CSS Grid","description":"<p>CSS Grid Layout has been in major browsers for a little less than a year now. Despite the excitement around it by people in the know, not everyone has jumped on board.</p> <p>I understand. Despite its browser adoption happening in record time, we still live in an IE world sometimes.</p> <p>While 2017 was the year of CSS Grid’s browser adoption, 2018 will be the year of its developer adoption.</p> <p>If you’re wondering how to start, here are three strategies for adopting it into your workflow.</p> <h2 id=\"reduce-excessive-markup\">Reduce Excessive Markup</h2> <p>Our appetite for better designs has increased in the past five years. With that – and our reliance on old layout techniques – we’ve seen an explosion in nested markup.</p> <p>Take this simple promotional grid layout for example.</p> <p><img src=\"/images/grid-comparison.jpg\" alt=\"Side-by-side comparison of a flex grid to a grid layout grid\" /></p> <p>To make this happen, we have to introduce a slew of markup to add rows inside of rows.</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"flexgrid\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"left-side\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"right-side\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"right-top\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>2<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"right-bottom\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>3<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>4<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span></code></pre></figure> <p>Keeping track of the nesting is a headache. It also fights against clean, semantic HTML. </p> <p>Let’s take the same design and build out the HTML we need for CSS Grid.</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"grid\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grid__item\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grid__item\"</span><span class=\"nt\">&gt;</span>2<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grid__item\"</span><span class=\"nt\">&gt;</span>3<span class=\"nt\">&lt;/div&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grid__item\"</span><span class=\"nt\">&gt;</span>4<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span></code></pre></figure> <p>With one parent and four direct children, we can pull off uneven rows and columns. </p> <p>The promise of Grid Layout is the promise of semantic markup and true separation of concerns.</p> <p><a href=\"https://codepen.io/brob/pen/GQRXMe?editors=0100\">View my CodePen of the layouts side-by-side</a></p> <h2 id=\"build-a-multi-column-form\"><strong>Build a Multi-Column Form</strong></h2> <p>While you’re simplifying your markup, you might as well take a look at upping your form game.</p> <p>Sure a one-column form will get the job done, but why not add a little spice with multiple columns.</p> <p><img src=\"/images/2-column-form.jpg\" alt=\"A simple form with both 2-column elements and 1-column full width elements\" /></p> <p>Instead of setting up rows of content inside of a form, tell the form to be two columns and let certain areas stretch.</p> <p>In this example, we want the street address and comment box to have more room for comfortable writing.</p> <p>By creating a “fullwidth” class that uses grid-column: span 2, we can have a single input change its layout. The other inputs that can be smaller remain side by side.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.form</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"n\">fr</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span> <span class=\"py\">grid-gap</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.fullwidth</span> <span class=\"p\">{</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"n\">span</span> <span class=\"m\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p><a href=\"https://codepen.io/brob/pen/BYyrjw?editors=1100\">View the example on CodePen</a></p> <h2 id=\"use-grid-layout-instead-of-the-bootstrap-or-foundation-grid\"><strong>Use Grid Layout instead of the Bootstrap or Foundation Grid</strong></h2> <p>I try to write a lot about Grid Layout bringing new design options to the table, but sometimes it’s worthwhile to use tested methods.</p> <p>If you want to take a baby step into Grid, try recreating your 12-column Bootstrap or Foundation grid.</p> <p>Start with a simple grid declaration and setup.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.grid</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"nb\">repeat</span><span class=\"p\">(</span><span class=\"m\">12</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">);</span> <span class=\"py\">grid-column-gap</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>From there, you can set up classes that span various column counts.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.span3</span> <span class=\"p\">{</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"n\">span</span> <span class=\"m\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.span9</span> <span class=\"p\">{</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"n\">span</span> <span class=\"m\">9</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>I bet you can figure out the rest.</p> <p>If you’re looking to get started, this is an easy shift in your workflow. This isn’t the best use of Grid. Start expanding your mindset to work outside of traditional ideas of what a grid is.</p> <h2 id=\"bonus-make-a-responsive-grid-with-no-media-queries\"><strong>Bonus: Make a Responsive Grid with No Media Queries</strong></h2> <p>One of the absolute coolest features in Grid layout is the combination of repeat() and minmax() functions.</p> <p>I wrote a blog post on <a href=\"/blog/2017/07/26/howto-css-grid-layout-to-make-a-simple-fluid-card-grid/\">how to make a fluid grid of cards with no media queries</a>. It’s pretty slick.</p> <h2 id=\"start-experimenting-with-grid\">Start Experimenting with Grid</h2> <p>More than anything else, this represents a shift in the way we develop websites. It will require you playing and working in it.</p> <p>Whatever strategy you implement to learn Grid, start learning it.</p>","link":"https://bryanlrobinson.com/blog/2018/01/29/3-strategies-for-getting-started-with-css-grid/","url":"https://bryanlrobinson.com/blog/2018/01/29/3-strategies-for-getting-started-with-css-grid/","created":1517184000000},{"title":"CSS Tip&#58; Use rotate() and skew() together to introduce some clean punk rock to your CSS","description":"<p>In 2018, the web design industry is going to start looking very different. Literally.</p> <p>With all the tools we’re gaining in CSS, designers are going to have new ability to experiment. I wrote about some of those tools on CSS Tricks: <a href=\"https://css-tricks.com/five-design-fears-vanquish-css-grid/\">Five Design Fears to Vanquish with CSS Grid</a>.</p> <p>I’m still convinced that taking inspiration from punk rock design of the 70s and 80s is going to be a trend.</p> <p>If you want to start small, introduce some angles to your design. This is a simple trick to angle a stripe of content without adding awkward white space.</p> <h2 id=\"start-with-a-regular-stripe\">Start with a regular stripe</h2> <p><img src=\"/images/uploads/regular.jpg\" alt=\"Regular Stripe Image\" /></p> <p>We all know this design pattern: full width background and nice promotional content.</p> <p>We set up very simple markup:</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"stripe\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;h1&gt;</span>Check this regular stripe<span class=\"nt\">&lt;/h1&gt;</span> <span class=\"nt\">&lt;p&gt;</span>If you're wanting to get into punk-rock design, rotated areas are really cool and you'll look hip and cool.<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span></code></pre></figure> <p>Add a pinch of very simple CSS and we’re done.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.stripe</span> <span class=\"p\">{</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">240deg</span><span class=\"p\">,</span> <span class=\"m\">#eaee44</span><span class=\"p\">,</span> <span class=\"m\">#90ec19</span><span class=\"p\">);</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5rem</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></figure> <p>This is a lovely serviceable stripe of content. You also get to dig on a nice linear-gradient while you’re there.</p> <h2 id=\"use-transform-rotate-to-introduce-the-angle\">Use transform: rotate() to introduce the angle</h2> <p><img src=\"/images/uploads/rotate.jpg\" alt=\"Rotate the first stripe\" /></p> <p>The transform CSS property has a load of great functions. One of the easiest functions to use is rotate(). It takes an angle unit such as 45deg and rotates the element by that amount. A positive integer is a clockwise turn and negative is a counter-clockwise turn.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.stripe</span> <span class=\"p\">{</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">240deg</span><span class=\"p\">,</span> <span class=\"m\">#eaee44</span><span class=\"p\">,</span> <span class=\"m\">#90ec19</span><span class=\"p\">);</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5rem</span><span class=\"p\">;</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"m\">-5deg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <p>You’ll notice from the photo that this introduces an issue. This is still a rectangle and by rotating the rectangle, we see the corners.</p> <p>This doesn’t feel professional, so we need this to stay flush to the browser edge.</p> <h2 id=\"skew-to-the-rescue\">skew() to the rescue</h2> <p><img src=\"/images/uploads/rotate_skew.jpg\" alt=\"Skew the rotated element\" /></p> <p>By taking the same angle we used in our rotate() function, we can skew the element back. This angles the left and right sides of our element back to their starting points.</p> <p>The transform property can take multiple functions, so we apply it on the same line of CSS.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.stripe</span> <span class=\"p\">{</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">240deg</span><span class=\"p\">,</span> <span class=\"m\">#eaee44</span><span class=\"p\">,</span> <span class=\"m\">#90ec19</span><span class=\"p\">);</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5rem</span><span class=\"p\">;</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"m\">-5deg</span><span class=\"p\">)</span> <span class=\"n\">skew</span><span class=\"p\">(</span><span class=\"m\">-5deg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <p>The discerning designer eye will notice one more issue with our implementation. The text is now skewed. This may be something you want. The skewed text bothers me slightly, so let’s unskew it.</p> <h2 id=\"time-to-unskew-the-text\">Time to unskew the text</h2> <p><img src=\"/images/uploads/rotate_skew_unskew.jpg\" alt=\"Unskew the text\" /></p> <p>I’m not a huge fan of introducing new markup for styling if I can avoid it, but with the introduction of a content container, we can fix our text skew.</p> <p>Chances are decent, you had a container here anyway to set a width on your content.</p> <p>By applying a skew of the negative angle we’ve been using, the text will re-skew back to its initial angle. You can also use this method to un-rotate the text, as well, if that’s your need.</p> <p>Full Markup:</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"stripe\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"stripe__content\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;h1&gt;</span>Check this rotation with the straight edges and non-skewed text!!!<span class=\"nt\">&lt;/h1&gt;</span> <span class=\"nt\">&lt;p&gt;</span>If you're wanting to get into punk-rock design, rotated areas are really cool and you'll look hip and cool.<span class=\"nt\">&lt;/p&gt;</span> <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span></code></pre></figure> <p>Full CSS:</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.stripe</span> <span class=\"p\">{</span> <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"n\">linear-gradient</span><span class=\"p\">(</span><span class=\"m\">240deg</span><span class=\"p\">,</span> <span class=\"m\">#eaee44</span><span class=\"p\">,</span> <span class=\"m\">#90ec19</span><span class=\"p\">);</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5rem</span><span class=\"p\">;</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"m\">-5deg</span><span class=\"p\">)</span> <span class=\"n\">skew</span><span class=\"p\">(</span><span class=\"m\">-5deg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.stripe__content</span> <span class=\"p\">{</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">skew</span><span class=\"p\">(</span><span class=\"m\">5deg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <p>This gives us clean lines with a hint of punk rock. <a href=\"https://codepen.io/brob/pen/xpNyqE?editors=1100\">See this in action on CodePen</a>.</p> <p>If you’re still doing things the same way you’ve always done them, it’s time to spice things up. Adding angles is an easy and painless way of tossing some cayenne into your design process.</p>","link":"https://bryanlrobinson.com/blog/2018/01/24/tip-use-rotate-and-skew-together-to-introduce-punk-rock-design/","url":"https://bryanlrobinson.com/blog/2018/01/24/tip-use-rotate-and-skew-together-to-introduce-punk-rock-design/","created":1516752000000},{"title":"The 5 Stages of Grid Love","description":"<figure style=\"grid-column: 1 / 3; grid-row: 1 / 8;\"><img src=\"/images/grid-love.jpg\" alt=\"Grid Love\" /></figure> <p>December represents the month the I first fell in love with the CSS Grid specification. I redesigned my blog to use CSS Grid in December 2016 (before Grid was in browsers). Looking back on the past year, I’ve identified the five stages of my love with this specification.</p> <h2 id=\"1-some-very-smart-people-i-respect-are-proponents\">1. Some very smart people I respect are proponents</h2> <p>If you follow any CSS news, you’ll know that 2017 was the year of Grid. However, two technology luminaries paved the way for Grid’s adoption: Jen Simmons and Rachel Andrew.</p> <p>At the time I learned about Grid, I was teaching an HTML/CSS course to college journalism students. Mid-way through each semester, I would show Jen Simmons’ talk “<a href=\"http://jensimmons.com/presentation/modern-layouts-getting-out-our-ruts\">Modern Layouts: Getting Out of Our Ruts</a>.”</p> <p>In this talk, she mentioned lots of ways to change the way we design for the web. There’s only a little bit of time spent on Grid, but it was enough to pique my interest. Watching this talk was my first introduction to Rachel Andrew’s work.</p> <p>If you’re talking about Rachel Andrew and Grid, you’re talking about <a href=\"http://gridbyexample.com\">Grid by Example</a>. This is a great set of resources for learning the basics of how Grid works.</p> <h2 id=\"2-a-simple-grid\">2. A Simple Grid</h2> <p>Once you get past the basic examples, it’s time to format your first grid.</p> <p>The very first practical code you will write will be a simple grid with uniform columns.</p> <p>This will blow. your. mind. It blew mine. The amount of design power that three lines of CSS will grant you is amazing.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">display</span><span class=\"o\">:</span> <span class=\"nt\">grid</span><span class=\"o\">;</span>\n<span class=\"nt\">grid-template-columns</span><span class=\"o\">:</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span><span class=\"o\">;</span>\n<span class=\"nt\">grid-template-rows</span><span class=\"o\">:</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span> <span class=\"nt\">1fr</span><span class=\"o\">;</span></code></pre></figure> <p>I wrote a blog post – <a href=\"/blog/2017/03/21/grid-and-cover-pages/\">Make a More Flexible Cover Screen with CSS Grid</a> – that illustrates exactly what this is capable of.</p> <h2 id=\"3-a-responsive-grid-with-no-breakpoints\">3. A Responsive Grid with No Breakpoints?!</h2> <p>Next you learn about the repeat() function and minmax().</p> <p>With these two methods, you can replace a dozen lines of code with only three. Tutorial: <a href=\"/blog/2017/07/26/howto-css-grid-layout-to-make-a-simple-fluid-card-grid/\">How To: Use CSS Grid Layout to Make a Simple, Fluid Card Grid</a>.</p> <p>Trust me, you’ll want to use this everywhere.</p> <h2 id=\"4-named-grid-areas\">4. Named Grid Areas</h2> <p>This feels like the future. I can create a string representation of my grid’s areas and then assign my HTML elements to that area.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"err\"> </span><span class=\"nt\">display</span><span class=\"o\">:</span> <span class=\"nt\">grid</span><span class=\"o\">;</span>\n<span class=\"err\"> </span><span class=\"nt\">grid-template-columns</span><span class=\"o\">:</span> <span class=\"nt\">300px</span> <span class=\"nt\">50px</span> <span class=\"nt\">1fr</span><span class=\"o\">;</span>\n<span class=\"err\"> </span><span class=\"nt\">grid-template-areas</span><span class=\"o\">:</span> <span class=\"s1\">\"header header header\"</span>\n<span class=\"err\"> </span><span class=\"s1\">\"sidebar . main\"</span>\n<span class=\"err\"> </span><span class=\"s1\">\"footer footer footer\"</span><span class=\"o\">;</span></code></pre></figure> <h2 id=\"5-named-grid-lines\">5. Named Grid Lines</h2> <p>While named Grid Areas is nice, it’s amazing how flexible you can make a design by naming grid lines.</p> <p>In fact, every grid line can have multiple names. This allows for a designer to change an elements location on the fly. Instead of changing the entire grid for mobile, you can adjust how elements flow into the grid. You can do this in small ways as well as large.</p> <p>I’ve played a lot with this functionality, but this blog post by Tyler Sticka is a great, simple primer on it: <a href=\"https://cloudfour.com/thinks/breaking-out-with-css-grid-layout/\">Breaking out with CSS Grid Layout</a></p> <h2 id=\"and-much-more\">And much more</h2> <p>Of course, there’s much more to love in Grid, but these stages feel like how adoption goes. </p> <p>1. This looks neat</p> <p>2. Oh, yeah, I can do Bootstrap stuff on my own. This is neat</p> <p>3. Wait… wait. This is awesome for making simple grids… Like really awesome!</p> <p>4. Oh my God, my entire layout needs just got simplified!</p> <p>5. Power! Unimaginable Power! </p> <p>Yeah… that’s how I feel. So much layout power.</p> <p>How did you learn to love Grid? What are the killer features or workflows that you use?</p>","link":"https://bryanlrobinson.com/blog/2017/12/07/five-stages-of-css-grid-love/","url":"https://bryanlrobinson.com/blog/2017/12/07/five-stages-of-css-grid-love/","created":1512604800000},{"title":"How To&#58; A CSS-Only Mobile Off Canvas Navigation","description":"<p>Before we get started, I’d like to state for the record: I like JavaScript. There’s nothing wrong with using the third language of the browser. It’s a great tool for many solutions. But for simple interactions, why complicate matters?</p> <p>There’s so much HTML and CSS can do on their own for presentation. Take for instance, the mobile nav icon and slide-out navigation. The “Hamburger” nav design pattern. </p> <p>There is a lot of writing on the usability side of things. For development, though, we see things happening the same way over and over again. </p> <p>Click events and state management being built in JavaScript.</p> <p>That’s not unusual. These tasks are perfect for JavaScript. If we’re hiding the navigation on mobile, though, should we be adding another dependency to the page to display it?</p> <p>Why don’t we go old school? The only thing keeping us from a JavaScriptless mobile navigation is state management. How can we trigger a “show” state on tap or click, right? </p> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h2 id=\"the-original-stated-element\">The original “stated” element</h2> <p>As it turns out, we have states in HTML that are accessible by CSS. <code class=\"highlighter-rouge\">&lt;input type=\"checkbox\"&gt;</code> has a checked and unchecked state. This functionality has been in the browser since HTML 2.</p> <p>We need to structure our HTML to make the best use of out CSS. </p> <div class=\"pull-1\"> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;nav</span> <span class=\"na\">class=</span><span class=\"s\">\"navigation\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">id=</span><span class=\"s\">\"nav-toggle\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"nav-toggle\"</span><span class=\"nt\">&gt;</span>Menu<span class=\"nt\">&lt;/label&gt;</span> <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"nav-list\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Nav Item 1<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span> <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Nav Item 2<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span> <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Nav Item 3<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span> <span class=\"nt\">&lt;/ul&gt;</span> <span class=\"nt\">&lt;/nav&gt;</span></code></pre></figure> </div> <p>First, it’s imporant for our label to have a “for” attribute. This will allow it to function in place of the checkbox itself later. Also notice in this example, our <code class=\"highlighter-rouge\">&lt;ul&gt;</code> for our navigation is a sibling to our #nav-toggle checkbox. We’re going to use this relationship to select it in CSS.</p> <h2 id=\"reading-the-state-in-css\">Reading the State in CSS</h2> <p><img src=\"/images/blog/mobile-nav/simple-toggle.gif\" alt=\"Gif of checkbox toggling state\" /></p> <p>Now that we’ve got a stated element on the page, we need to read that in CSS.</p> <p>Here’s the simplest CSS example to use the state:</p> <p>We start with our initial state. In the case of a mobile nav it shouldn’t be shown. So .nav-list is display: none. When we select .nav-list, we want to couple it to its stateful element. In this case, we’ll use the CSS sibling selector ~.</p> <p>To check the state of #nav-toggle, we’ll use the :checked pseudo class.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nn\">#nav-toggle</span> <span class=\"o\">~</span> <span class=\"nc\">.nav-list</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span> <span class=\"c1\">// Initial state</span>\n<span class=\"p\">}</span>\n<span class=\"nn\">#nav-toggle</span><span class=\"nd\">:checked</span> <span class=\"o\">~</span> <span class=\"nc\">.nav-list</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span> <span class=\"c1\">// Toggled State using the :checked pseudo-class</span>\n<span class=\"p\">}</span></code></pre></figure> <p>Now, we have state built into our CSS for our navigation. All we have left is to style elements to look like we expect a mobile navigation to look.</p> <p>This is where the “for” attribute on the label comes in handy. I’ve never seen a mobile navigation button with a checkbox. So first, we’ll hide the checkbox and do our main styling on the label. This work is usually done on an anchor tag.</p> <p>This is where preference you can deviate. Make it the mobile nav style you like best. You will need to change the <code class=\"highlighter-rouge\">&lt;label&gt;</code>’s display property from “inline” to “block.” Past that, I put my money on the word “Menu” and not a hamburger Icon, with a simple border style.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nn\">#nav-toggle</span> <span class=\"o\">~</span> <span class=\"nt\">label</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span> <span class=\"c1\">// Styling</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">15px</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"n\">grey</span><span class=\"p\">;</span> <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">3px</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100px</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"off-canvas-navigation\">“Off-canvas” Navigation</h2> <p>While a show/hide navigation would work, “off-canvas” navigation is still in vogue. So, we’ll take our actual navigation and move it to the right out of the visible viewport.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nc\">.nav-list</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">fixed</span><span class=\"p\">;</span> <span class=\"c1\">// Absolute positioning would work as well</span> <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">-100%</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">250px</span><span class=\"p\">;</span> <span class=\"c1\">// In most sites, I’d use a VW instead of a hard pixel value</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"animating\">Animating</h2> <p><img src=\"/images/blog/mobile-nav/nav-styled.gif\" alt=\"Gif of nav toggling\" /></p> <p>I’m not great with animation, but I know animation is key to a good user interface. Instead of having the off-canvas nav magically show up on page, we’ll have it slide in.</p> <p>To do this, we’ll use CSS transform’s translateX function and a nice bouncy transition. For consistency, you’ll want to use the same movement and transition on the label AND .nav-list.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nn\">#nav-toggle</span> <span class=\"o\">~</span> <span class=\"nc\">.nav-list</span><span class=\"o\">,</span> <span class=\"nn\">#nav-toggle</span> <span class=\"o\">~</span> <span class=\"nt\">label</span> <span class=\"p\">{</span> <span class=\"c1\">// Nice bouncy transition</span> <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"mi\">.5s</span> <span class=\"n\">transform</span><span class=\"p\">;</span> <span class=\"nl\">transition-timing-function</span><span class=\"p\">:</span> <span class=\"nf\">cubic-bezier</span><span class=\"p\">(</span><span class=\"mi\">.38</span><span class=\"o\">,.</span><span class=\"m\">52</span><span class=\"o\">,.</span><span class=\"m\">37</span><span class=\"o\">,</span><span class=\"m\">1</span><span class=\"mi\">.27</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"nn\">#nav-toggle</span><span class=\"nd\">:checked</span> <span class=\"o\">~</span> <span class=\"nc\">.nav-list</span><span class=\"o\">,</span> <span class=\"nn\">#nav-toggle</span><span class=\"nd\">:checked</span> <span class=\"o\">~</span> <span class=\"nt\">label</span> <span class=\"p\">{</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nv\">$flyout</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"finished-product\">Finished Product</h2> <p>That’s it. You now have a functioning mobile navigation with no JavaScript necessary.</p> <p data-height=\"400\" data-theme-id=\"26704\" data-slug-hash=\"oeNdbg\" data-default-tab=\"css,result\" data-user=\"brob\" data-embed-version=\"2\" data-pen-title=\"Mobile Nav no JS\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/brob/pen/oeNdbg/\">Mobile Nav no JS</a> by Bryan Robinson (<a href=\"https://codepen.io/brob\">@brob</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> <p><br />\nI created the mobile navigation on this site that way. <a href=\"https://codepen.io/una/full/Wjvdqm\">Una Kravets’ “Power of CSS” slides</a> and <a href=\"http://youmightnotneedjs.com/\">youmightnotneedjs.com</a> inspired me to create this for my site and share the process.</p>","link":"https://bryanlrobinson.com/blog/2017/08/02/css-only-mobile-slide-out-navigation/","url":"https://bryanlrobinson.com/blog/2017/08/02/css-only-mobile-slide-out-navigation/","created":1501632000000},{"title":"How To&#58; Use CSS Grid Layout to Make a Simple, Fluid Card Grid","description":"<p>In this tutorial, I’m going to show you how to take one of the most common tropes of web design – the card grid – and make it fluid. </p> <p>We could build this via a float- or flex-based grid and a handful of breakpoints. Why deal with breakpoints if Grid Layout can handle everything for us?</p> <p>Grid can do so much more than recreating old design patterns. If you’re looking for a good place to start, though, this is the best introduction to its power.</p> <h2 id=\"video-for-those-who-learn-by-watching\">Video: For those who learn by watching</h2>\n<div class=\"\" style=\"position: relative; width: 100%; height: 0; padding-bottom: 56.25%; margin-bottom: 1rem;\">\n<iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5fUKd2kDTzc\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n</div> <h2 id=\"step-1-create-your-markup\">Step 1: Create your markup</h2> <p>In this example, I’ve got a simple card with a title, photo, description and link. I’ve duplicated this markup 10 times to have content to show the grid in action.</p> <p>Place all the .card items inside a .card-container element.</p> <div class=\"pull-1\"> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"card-container\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;article</span> <span class=\"na\">class=</span><span class=\"s\">\"card\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;header</span> <span class=\"na\">class=</span><span class=\"s\">\"card__title\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;h3&gt;</span>Hello World<span class=\"nt\">&lt;/h3&gt;</span> <span class=\"nt\">&lt;/header&gt;</span> <span class=\"nt\">&lt;figure</span> <span class=\"na\">class=</span><span class=\"s\">\"card__thumbnail\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"http://placekitten.com/700/287\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;/figure&gt;</span> <span class=\"nt\">&lt;main</span> <span class=\"na\">class=</span><span class=\"s\">\"card__description\"</span><span class=\"nt\">&gt;</span> Lorem Ipsum dolor amet sun Lorem Ipsum dolor amet sun Lorem Ipsum dolor amet sun <span class=\"nt\">&lt;/main&gt;</span> <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span> <span class=\"na\">class=</span><span class=\"s\">\"button\"</span><span class=\"nt\">&gt;</span>Call to Action<span class=\"nt\">&lt;/a&gt;</span> <span class=\"nt\">&lt;/article&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span></code></pre></figure> </div> <div class=\"ad-space\"> <img src=\"/images/cc-logo.png\" alt=\"Promo Image for Practical CSS Grid - Learn about this revolution in Web design!\" class=\"ad-space__image\" /> <h3 class=\"ad-space__headline\">Practical CSS Grid - Learn about this revolution in Web design!</h3> <p class=\"ad-space__description\">Whether you're new to CSS Grid or have played with it, finding practical examples of this new layout mechanism is the best way to learn it's power. Sign up below for two hours of practical grid knowledge just for you!</p> <a href=\"https://store.codecontemporary.com/practical-css-grid\" class=\"button ad-space__button\">Start Learning Now!</a>\n</div> <h2 id=\"step-2-visually-style-your-cards\">Step 2: Visually style your cards</h2> <p>In this case, I chose very simple style elements. You can style your cards however you would like. Keep in mind that your styles and cards should work at multiple sizes, as we’re building a fluid grid. Don’t use direct pixel values to avoid odd spacing.</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.card</span> <span class=\"p\">{</span> <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"m\">1px</span> <span class=\"m\">5px</span> <span class=\"m\">#555</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.card__title</span> <span class=\"p\">{</span> <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">2rem</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">.5rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.card__description</span> <span class=\"p\">{</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">.5rem</span><span class=\"p\">;</span> <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1.6em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.button</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">tomato</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">10px</span> <span class=\"m\">20px</span><span class=\"p\">;</span> <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span> <span class=\"nl\">text-decoration</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span> <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">.3s</span> <span class=\"n\">ease-out</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"step-3-define-your-grid\">Step 3: Define your Grid</h2> <p>We’ll start by changing the display value of our .card-container from “block” to “grid.” This will create the grid context for the cards.</p> <p>Using that context, we’ll define our “grid-template-columns.” This is where the fun begins. We could specify a finite number of columns, but then we’d be in the same situation as a flex or float grid.</p> <p>Instead, we’ll use the power of some special keywords to create a fluid amount of columns per row.</p> <h3 id=\"3a-repeatrepeat-value-size-value\">3A: repeat(repeat value, size value)</h3> <p>First, we’ll use the “repeat()” function. repeat() takes two arguments: number of times to repeat and the value to repeat.</p> <p>For Example:</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">grid-template-columns</span><span class=\"o\">:</span> <span class=\"nt\">repeat</span><span class=\"o\">(</span><span class=\"nt\">3</span><span class=\"o\">,</span> <span class=\"nt\">100px</span><span class=\"o\">)</span></code></pre></figure> <p>will compute to</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">grid-template-columns</span><span class=\"o\">:</span> <span class=\"nt\">100px</span> <span class=\"nt\">100px</span> <span class=\"nt\">100px</span></code></pre></figure> <h3 id=\"3b-auto-fit\">3B: auto-fit</h3> <p>Next, instead of specifying a finite number of times to repeat, we’ll use the “auto-fit” keyword. This will tell the browser to have as many columns as will work based on the size specified in the repeat syntax. There’s also “auto-fill” which works the same. The difference between the two is what happens with extra tracks (<a href=\"https://gridbyexample.com/examples/example37/\">see Rachel Andrews’ Grid By Example</a>).</p> <h3 id=\"3c-minmaxsmallest-size-largest-size\">3C: minmax(smallest size, largest size)</h3> <p>Replacing the size value in our repeat() function will be a minmax() function. minmax() allows you to specify the smallest and largest you want a track to be.</p> <p>In our example, we want our cards to be able to size down to fit in mobile (I use 320px for this) and size up to be a fraction of the space available. Thus, our minmax() function will be</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">minmax</span><span class=\"o\">(</span><span class=\"nt\">320px</span><span class=\"o\">,</span> <span class=\"nt\">1fr</span><span class=\"o\">)</span></code></pre></figure> <p>Put all this together and you get a CSS declaration block that looks like this:</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.card-container</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"nb\">repeat</span><span class=\"p\">(</span><span class=\"n\">auto-fit</span><span class=\"p\">,</span> <span class=\"n\">minmax</span><span class=\"p\">(</span><span class=\"m\">320px</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">));</span>\n<span class=\"p\">}</span></code></pre></figure> <h2 id=\"step-4-spacing\">Step 4: Spacing</h2> <p>We now have a fluid grid, but all our cards are jammed together. Instead of reaching for our old stand-by “margin,” we’ll use another new property: grid-gap.</p> <p>Grid-gap will place a space between the tracks of our grid (columns and rows). This doesn’t add space around the grid, so we’ll couple that with some padding of our container. Our CSS is now complete and looks like this:</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.card-container</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span> <span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"nb\">repeat</span><span class=\"p\">(</span><span class=\"n\">auto-fit</span><span class=\"p\">,</span> <span class=\"n\">minmax</span><span class=\"p\">(</span><span class=\"m\">320px</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">));</span> <span class=\"py\">grid-gap</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>And voila! A fluid, responsive grid created with no breakpoints.</p> <p>Below is the <a href=\"https://codepen.io/brob/pen/MvwbMa?editors=1100\">CodePen</a> that contains this example in its entirety. If you have any questions, post them in the comments or feel free to contact me <a href=\"http://twitter.com/brob/\">on Twitter</a>. If you’re interest in implementing Grid and still supporting older browsers, <a href=\"/blog/2017/01/18/your-code-should-fall-forward/\">take a look at this post</a>.</p> <p data-height=\"500\" data-theme-id=\"26704\" data-slug-hash=\"MvwbMa\" data-default-tab=\"result\" data-user=\"brob\" data-embed-version=\"2\" data-pen-title=\"MvwbMa\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/brob/pen/MvwbMa/\">MvwbMa</a> by Bryan Robinson (<a href=\"https://codepen.io/brob\">@brob</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> <h3 id=\"next-up-learn-how-to-mix-and-match-design-patterns-for-each-screen-size\">Next Up: <a href=\"/blog/2018/06/13/how-to-use-css-grid-to-mix-and-match-design-patterns/\">Learn how to mix and match design patterns for each screen size</a></h3>\n<p><img src=\"/images/responsive-grid-break-design.jpg\" alt=\"Various design patterns per screen size using grid\" /></p> <p>See the power of grid in creating different layouts for different screen sizes with the simplest media queries.</p> <p><a href=\"/blog/2018/06/13/how-to-use-css-grid-to-mix-and-match-design-patterns/\">See it in action »</a></p>","link":"https://bryanlrobinson.com/blog/2017/07/26/howto-css-grid-layout-to-make-a-simple-fluid-card-grid/","url":"https://bryanlrobinson.com/blog/2017/07/26/howto-css-grid-layout-to-make-a-simple-fluid-card-grid/","created":1501027200000},{"title":"Make a More Flexible Cover Screen with CSS Grid","description":"<p>Our design trends are about to get a facelift. Grid Layout is coming in the next release of modern browsers. It’s important to get a grip on its utility. </p> <p>Let’s take a common trend in editorial and marketing design: the “cover page” banner area.</p> <figure class=\"pull-1\"><img src=\"/images/blog/grid-cover/simple-cover.jpg\" /></figure> <p>At its simplest, this contains five elements: headline, subhead, byline, photo and photo credit.</p> <p>This is a bold design pattern. </p> <p>With current CSS, it’s also a static design pattern. Each article detail page is laid out the same. The only difference is the background image.</p> <p>With CSS Grid, we take similar markup on each page and can apply unique layout. This opens the door to art direction for each article. </p> <p><em>Author’s note: For simplification the examples in this article won’t use Feature Queries to ensure support. See my post on <a href=\"/blog/2017/01/18/your-code-should-fall-forward/\">Feature Queries for more information on implementing Grid while supporting non-compliant browsers</a>.</em></p> <p><em>Second author’s note: I can envision some great CMS interfaces using this method. Selectable grid areas in a CMS would be amazing and super flexible.</em></p> <p>To get to the point of flexibility, we first have to set up our template. The .headline, .subhead and .secondary are all children under our grid container.</p> <figure class=\"float--left\"> <img src=\"/images/blog/grid-cover/grid-setup.gif\" />\n</figure> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"> <span class=\"nc\">.cover</span> <span class=\"p\">{</span> <span class=\"nl\">box-sizing</span><span class=\"p\">:</span> <span class=\"n\">border-box</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100vh</span><span class=\"p\">;</span> <span class=\"c1\">// Always 100% of the viewport's height</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"na\">grid-template-rows</span><span class=\"p\">:</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span><span class=\"p\">;</span> <span class=\"c1\">// 5 rows</span> <span class=\"na\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span><span class=\"p\">;</span> <span class=\"c1\">// 5 columns</span> <span class=\"na\">grid-gap</span><span class=\"p\">:</span> <span class=\"m\">5px</span><span class=\"p\">;</span> <span class=\"c1\">// 5x5 works well for centering</span> <span class=\"p\">}</span></code></pre></figure> <p>After we write our HTML and set up our grid in CSS, we’re ready to place our content. Here’s an example of the basic “cover” layout:</p> <p><img src=\"/images/blog/grid-cover/grid-easy-image.jpg\" alt=\"\" /></p> <p>To layout a headline, subhead and caption this simply, Grid may be a bit of overkill. Here’s the code for the image above:</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"> <span class=\"nc\">.headline</span> <span class=\"p\">{</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">3</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">2</span> <span class=\"o\">/</span> <span class=\"m\">5</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span> <span class=\"nl\">align-self</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span> <span class=\"nl\">align-self</span><span class=\"p\">:</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.subhead</span> <span class=\"p\">{</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">4</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">2</span> <span class=\"o\">/</span> <span class=\"m\">5</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.secondary</span> <span class=\"p\">{</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">4</span> <span class=\"o\">/</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">right</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></figure> <p>Flexbox and absolute positioning would probably have made this easier. This setup also allows us to use the 5x5 grid to create new and powerful combinations based on the same markup.</p> <p>We can allow our image to dictate the needs of our content. We can also allow the text to speak to our articles theme. In other words, we can art direct on the web (<a href=\"http://jensimmons.com/presentation/revolutionize-your-page-real-art-direction-web\">inspiration from Jen Simmons for this language</a>).</p> <h2 id=\"example-1-skyline\">Example 1: Skyline</h2> <p><img src=\"/images/blog/grid-cover/skyline-image.jpg\" alt=\"\" /></p> <p>In our first example, we’ve got a beautiful shot of a city skyline blazing in the night.</p> <p>There would still be impact if we left our headline in its default position, but the headline will compete with the image. What if the text could mirror the shape of a skyscraper? What if it could also fit within the negative space afforded by the walkway?</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"> <span class=\"nc\">.headline</span> <span class=\"p\">{</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">2</span> <span class=\"o\">/</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">3</span> <span class=\"o\">/</span> <span class=\"m\">4</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span> <span class=\"nl\">align-self</span><span class=\"p\">:</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.secondary</span> <span class=\"p\">{</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">5</span> <span class=\"o\">/</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">4</span> <span class=\"o\">/</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">right</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></figure> <p><img src=\"/images/blog/grid-cover/grid-center-column.jpg\" alt=\"\" /></p> <h2 id=\"example-2-connecting-eye-line-to-headline\">Example 2: Connecting eye line to headline</h2> <p>The images we choose can also help direct a user’s eye where we want it to go.</p> <p><img src=\"/images/blog/grid-cover/forest-image.jpg\" alt=\"\" /></p> <p>Not only does this image have a striking subject and color scheme, it also places its subject in an awkward spot for designers.</p> <p>In this example, we can eschew the tradition of placing our headline at the center or on the left side of the screen. Instead, we work with our image to allow the woman’s eye line to connect the user to our headline in an atypical design.</p> <p><img src=\"/images/blog/grid-cover/forest-grid-opt.gif\" alt=\"\" /></p> <p>Again, we can simply change our CSS to change our layout. No need to modify markup.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"> <span class=\"nc\">.headline</span> <span class=\"p\">{</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">2</span> <span class=\"o\">/</span> <span class=\"m\">5</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">5</span> <span class=\"o\">/</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">right</span><span class=\"p\">;</span> <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s1\">'Stalemate'</span><span class=\"o\">,</span> <span class=\"nb\">cursive</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.subhead</span> <span class=\"p\">{</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">3</span> <span class=\"o\">/</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">right</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.secondary</span> <span class=\"p\">{</span> <span class=\"nl\">grid-row</span><span class=\"p\">:</span> <span class=\"m\">6</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">1</span> <span class=\"o\">/</span> <span class=\"m\">3</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></figure> <h2 id=\"more-examples\">More examples</h2> <p>Here are other screenshots for ways of laying out content in a cover page via the same grid and markup we’ve used so far. All of these layouts are available to play with <a href=\"http://codepen.io/collection/DKgxgx/\">in my CodePen collection</a>. If you use them in CodePen, keep in mind, you’ll need to have a Grid-enabled browser.</p> <p><img src=\"/images/blog/grid-cover/room.jpg\" alt=\"\" /> <img src=\"/images/blog/grid-cover/architecture.jpg\" alt=\"\" /></p>","link":"https://bryanlrobinson.com/blog/2017/03/21/grid-and-cover-pages/","url":"https://bryanlrobinson.com/blog/2017/03/21/grid-and-cover-pages/","created":1490054400000},{"title":"Can CSS Grid open up interesting CMS Layout options?","description":"<p>I love hand crafting layout in CSS Grid. Ask my co-workers. They’re tired of hearing about it.</p> <p>Nothing is going to stop me from hand-coding my CSS. What about people who write no CSS, though? Can we use Grid to open up a world of new layout options to CMS users?</p> <p>That’s not a rhetorical question. I want to hear opinions on this.</p> <p>I’ve created a very simple prototype. To all my friends who write good JavaScript, I apologize. Don’t look at the JS panel and you’ll be happier. The <a href=\"http://codepen.io/brob/pen/QpqNVq/\">CodePen is here</a> and embedded at the bottom of the article.</p> <p>In this example, there are three components on a six-column grid. The doesn’t have rows specified, but is adjusting the implicit rows via grid-auto-rows.</p> <p>With simple markup and ugly JavaScript, I created an interface to let a user select grid areas. Using this interface, a user can take this layout:</p> <p><img src=\"/images/blog/cms-grid/grid-start.jpg\" alt=\"The starting point for the grid\" /></p> <p>And change it to these layouts:</p> <p><img src=\"/images/blog/cms-grid/grid-cms.gif\" alt=\"Changing the layout based on user input\" style=\"width: 100%;\" /></p> <p>As a CSS purist, I’m always wary of ceding my control over to JavaScript or a CMS database. Does this enable a CMS user more interesting controls than otherwise possible?</p> <h2 id=\"try-it-for-yourself\">Try it for yourself</h2> <p>Keep in mind, you’ll need at least Firefox 52 or Chrome 57.</p> <p data-height=\"600\" data-theme-id=\"26704\" data-slug-hash=\"QpqNVq\" data-default-tab=\"result\" data-user=\"brob\" data-embed-version=\"2\" data-pen-title=\"Grid CMS Interface\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/brob/pen/QpqNVq/\">Grid CMS Interface</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> <p>What do you think? Good idea? Bad idea? Overkill?</p> <p>Keep in mind before answering, I know that Grid is in its infancy of support. These are important questions for the future.</p>","link":"https://bryanlrobinson.com/blog/2017/03/16/css-grid-and-a-cms/","url":"https://bryanlrobinson.com/blog/2017/03/16/css-grid-and-a-cms/","created":1489622400000},{"title":"Firefox 52 to Introduce New Box-Alignment Values","description":"<p><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/52\">CSS Grid is coming in Firefox 52 in March</a>. That’s amazing. It could overshadow a few small improvements that are also coming in the release. The Box-Alignment module is getting a couple new features, as well.</p> <h2 id=\"space-items-evenly-instead-of-around\">Space items evenly instead of around!</h2> <p>First, we have a new value we can use in justify-content and align-items: space-evenly.</p> <p>In the past, we’ve had space-around. This allows the extra whitespace generated by flex/grid to be placed to the left and right of the children. This is useful, but the exterior whitespace is half the value of the internal whitespace. Often not ideal.</p> <p><img src=\"/images/blog/space-evenly/space-around.png\" alt=\"Space-Around's less-than-ideal layout\" /></p> <p>Space-evenly takes the extra whitespace and splits it up … well … evenly.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nc\">.container</span> <span class=\"p\">{</span> <span class=\"nt\">display</span><span class=\"nd\">:flex</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">600px</span><span class=\"p\">;</span> <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">50px</span> <span class=\"nb\">auto</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#042A2B</span><span class=\"p\">;</span> <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"n\">space-even</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p>With this value, you no longer need to account for half the spacing as padding on the parent. The Box-Alignment properties can now handle all spacing needs.</p> <p><img src=\"/images/blog/space-evenly/space-evenly.png\" alt=\"Space-Evenly's fix\" /></p> <p><a href=\"http://codepen.io/brob/pen/NdmjRp\">I’ve written a CodePen if you want to play with this value</a>. Remember, it can only be accessed in the Firefox 52 Beta currently.</p> <h2 id=\"baseline-first-and-last\">Baseline first and last</h2> <p>Align-items has always had baseline as a value. This aligns the baseline of the first line of text to the first line of text of its sibling boxes. This is great for some use cases and pairs nicely as a counterpoint to align-items: flex-start. </p> <p>Where’s the counterpoint to flex-end, though?</p> <p>Firefox 52 implements align-items: first/last baseline allowing you to choose.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nc\">.container</span> <span class=\"p\">{</span> <span class=\"nl\">align-items</span><span class=\"p\">:</span> <span class=\"n\">last</span> <span class=\"nb\">baseline</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <p><img src=\"/images/blog/space-evenly/baseline.png\" alt=\"Baseline last in action\" /></p> <p><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/52\">See the entire list of new features here</a>. There’s also some new interesting clip-path and animation features included. Of course, there’s also <a href=\"/blog/2017/01/12/simple-grid-examples/\">CSS Grid</a>!</p>","link":"https://bryanlrobinson.com/blog/2017/02/16/new-box-alignment-values-in-firefox-52/","url":"https://bryanlrobinson.com/blog/2017/02/16/new-box-alignment-values-in-firefox-52/","created":1487203200000},{"title":"Falling Forward — Rethinking Progressive Enhancement, Graceful Degradation and Developer Morality","description":"<p>Forget what you know about Graceful Degradation. Forget what you know about Developer Convenience. Forget what you know about Progressive Enhancement.</p> <p>Instead of arguing over these terms, we should focus on how to change our culture. Create “fallforwards” not “fallbacks.”</p> <p>In some ways this post is a semantic argument. Yet, it is an important one. </p> <aside class=\"subhead\"> <h2>Language Shapes Culture</h2> </aside> <p>Lera Boroditsky, an assistant professor at Stanford, <a href=\"http://isites.harvard.edu/fs/docs/icb.topic1481762.files/Boroditsky-2011.pdf\">wrote an article</a> on the effects of language on cognitive reasoning.</p> <p>For those of us who studied philosophy and linguistics in college, this comes as no surprise. Yet, the depth of this influence bias is amazing.</p> <aside class=\"reference\"> <p>The full text of the article is an interesting read, I highly recommend it even if you don't agree with this post.</p> </aside> <p>This seems obvious in some cases. A language that often genders its vocabulary will have children that recognize their gender earlier (page 65 in the reference). In other cases it can be astounding. A 5-year-old girl living in an Australian Aboriginal community could discern cardinal directions. Intelligent adults in Western cultures struggle to gain a sense of direction. </p> <p>The languages of these cultures actively shapes comprehension.</p> <p>The girl from the example speaks a language with no relative spatial terms. Instead of an object being to the left of someone, it’s to the southwest. </p> <p>The linguistic need turns into an intellectual need: keeping track of directions. The brain forges the neural pathways necessary to accomplish this need.</p> <p>As it turns out, a semantic argument can be very important for creating culture shift.</p> <aside class=\"subhead\"><h2>Let’s not Fallback</h2></aside> <p>In our world of web development, we talk a lot about fallbacks.</p> <p>We use this word to mean “when this feature we’re using is not available to a user, how should our application behave?” </p> <p>If JavaScript is disabled, what should this animation that depends on it do? If a browser doesn’t support object-fit, should the image squish or hold its aspect ratio?</p> <p>Why does it matter if we use this word?</p> <p>Most definitions of “fallback” refer to “retreat” or “emergency” or other negative words. If our language is negative, we may end with a negative opinion of those we support.</p> <p>Or at the very least, we may view them with less sympathy.</p> <p>We shouldn’t retreat from these users. We should support them and then push forward into a new and awesome future.</p> <aside class=\"subhead\"><h2>How does this work?</h2></aside> <p>Is this different than “Progressive Enhancement?” No, not really. This is more about ditching the negative connotations.</p> <p>Let’s get started. As an example, let’s take a simple design form: an article list.</p> <p>Our first step is simple, clean markup. This, out of the box, works on all browsers and devices. Each article has a headline, description and link.</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"grid\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;article</span> <span class=\"na\">class=</span><span class=\"s\">\"item primary\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;time</span> <span class=\"na\">class=</span><span class=\"s\">\"date\"</span><span class=\"nt\">&gt;</span>12 Jan, 2017<span class=\"nt\">&lt;/time&gt;</span> <span class=\"nt\">&lt;h2&gt;</span>Start Exploring the Magic of CSS Grid Layout<span class=\"nt\">&lt;/h2&gt;</span> <span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"description\"</span><span class=\"nt\">&gt;</span>Grid is an amazing new CSS Specification coming to major browsers in 2017. When it’s ready for use in production, it’s going to drastically change the way we do layout on the web. Currently, there’s...<span class=\"nt\">&lt;/p&gt;</span> <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"http://bryanlrobinson.com/blog/2017/01/12/simple-grid-examples/\"</span> <span class=\"na\">class=</span><span class=\"s\">\"button\"</span><span class=\"nt\">&gt;</span>Read More<span class=\"nt\">&lt;/a&gt;</span> <span class=\"nt\">&lt;/article&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span> </code></pre></figure> <p><img src=\"/images/blog/fall-forward/plain-html.png\" alt=\"Plain HTML\" /></p> <p>Not exactly revolutionary.</p> <p>Next, we add simple styling, clean the margins and make it look good on mobile.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"> <span class=\"nc\">.grid</span> <span class=\"p\">{</span> <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">10px</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.grid</span> <span class=\"nc\">.item</span> <span class=\"p\">{</span> <span class=\"nl\">box-sizing</span><span class=\"p\">:</span> <span class=\"n\">border-box</span><span class=\"p\">;</span> <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"m\">10px</span> <span class=\"m\">10px</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5vw</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nv\">$brand-light</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></figure> <p><img src=\"/images/blog/fall-forward/simple-style.png\" alt=\"With some simple styling\" /></p> <p>These styles should be basic. Strive to add visual hierarchy and weight with spacing, colors and small images and clean the reading experience.</p> <p>When we’ve got more screen real estate than mobile, we expand into layout. In our case, a two-by-two card view would be nice on tablet. As we approach bigger sizes, though, the width of these boxes is too wide for our content.</p> <p>In this example, we use media queries to affect the flex-basis to adjust the size of these boxes.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">.grid</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span> <span class=\"nl\">flex-wrap</span><span class=\"p\">:</span> <span class=\"n\">wrap</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.grid</span> <span class=\"nc\">.item</span> <span class=\"p\">{</span> <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">5px</span> <span class=\"m\">10px</span><span class=\"p\">;</span> <span class=\"nl\">flex</span><span class=\"p\">:</span> <span class=\"m\">1</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">50%</span> <span class=\"o\">-</span> <span class=\"m\">10px</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">768px</span><span class=\"p\">)</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"o\">:</span> <span class=\"m\">1228px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">.grid</span> <span class=\"nc\">.item</span> <span class=\"p\">{</span> <span class=\"nl\">flex-basis</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">33%</span> <span class=\"o\">-</span> <span class=\"m\">10px</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">1228px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">.grid</span> <span class=\"nc\">.item</span> <span class=\"p\">{</span> <span class=\"nl\">flex-basis</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"m\">25%</span> <span class=\"o\">-</span> <span class=\"m\">10px</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure> <p><img src=\"/images/blog/fall-forward/collage-sizes.png\" alt=\"A collage of sizes \" /></p> <p>If this sounds like “mobile-first design,” you’re right. Mobile is a very restrictive place for design. It’s also very restrictive for powerful hardware available cheap. This means we need to put a premium on the content, not the “design.”</p> <aside class=\"reference\"> <p>I put a premium on the concept of capital D Design vs design. Lowercase design comes to the forefront. Capital Design fades into the background and is seamless with content.</p> </aside> <p>Once we get our simple layout done, we can expand on the layout. In our example, we have a perfectly nice layout for articles. We have served our audience. Now, let’s have fun.</p> <p>CSS Grid Layout is something I’ve written about recently. I’ve even begun using it to lay out pages on this site.</p> <p>Let’s make an impactful layout for our articles using some fun new code.</p> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"k\">@supports</span> <span class=\"o\">(</span><span class=\"nt\">grid-auto-rows</span><span class=\"nd\">:</span> <span class=\"nt\">1px</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">1100px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">.grid</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"na\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span><span class=\"p\">;</span> <span class=\"na\">grid-template-areas</span><span class=\"p\">:</span> <span class=\"s2\">\"main main main second third fourth\"</span> <span class=\"s2\">\"main main main fifth fifth fifth\"</span> <span class=\"s2\">\"promo promo promo promo promo promo\"</span> <span class=\"s2\">\"sixth sixth seventh seventh eighth eighth\"</span> <span class=\"s2\">\"sixth sixth seventh seventh ninth tenth\"</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"nc\">.grid</span> <span class=\"nc\">.item</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span> <span class=\"nl\">flex-direction</span><span class=\"p\">:</span> <span class=\"n\">column</span><span class=\"p\">;</span> <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span> <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">1</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">main</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">2</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">second</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">3</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">third</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">4</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">fourth</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">5</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">fifth</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">6</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">sixth</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">7</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">seventh</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">8</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">eighth</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">9</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">ninth</span><span class=\"p\">;}</span> <span class=\"k\">&amp;</span><span class=\"nd\">:nth-child</span><span class=\"o\">(</span><span class=\"nt\">10</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">tenth</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">&amp;</span><span class=\"nc\">.promo</span> <span class=\"p\">{</span> <span class=\"na\">grid-area</span><span class=\"p\">:</span> <span class=\"n\">promo</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure> <aside class=\"reference\"> <p>This is actually the layout of the blog posts <a href=\"/\">on my homepage</a> with some color and font tweaks.</p>\n</aside> <p><img src=\"/images/blog/fall-forward/full-grid.png\" alt=\"img\" /></p> <aside class=\"reference\"> <p>Interested in playing with this code? <a href=\"http://codepen.io/brob/pen/WRoMMy\">View it on CodePen</a>. Interested in how CSS Grid works? <a href=\"/blog/2017/01/12/simple-grid-examples/\">Read my simple grid primer</a>. </p>\n</aside> <p>In the code above, I’m using CSS Feature Queries to identify if a browser supports Grid before using it. By utilizing grid-auto-rows and not just display: grid, I can have Edge ignore it for now, but begin seeing it when it updates in 2017.</p> <p>With an idea of fallbacks, a developer might try to have Grid be the main layout engine. They might then fallback to flexbox using an @supports <em>not</em> (display: grid) query.</p> <p>The problem is Internet Explorer doesn’t understand Feature Queries. This means your handcrafted fallback will fail, as well.</p> <p>This is not a new concept. Call it Progressive Enhancement. Call it Moral Development. Call it Defensive Coding. Just don’t call it a Fallback. Support your users and fall forward into new design and code.</p>","link":"https://bryanlrobinson.com/blog/2017/01/18/your-code-should-fall-forward/","url":"https://bryanlrobinson.com/blog/2017/01/18/your-code-should-fall-forward/","created":1484697600000},{"title":"Start Exploring the Magic of CSS Grid Layout","description":"<p>Grid is an amazing new CSS Specification coming to major browsers in 2017. When it’s ready for use in production, it’s going to drastically change the way we do layout on the web.</p> <aside class=\"reference\"> <p>If you're worried about browser support, <a href=\"/blog/2017/01/18/your-code-should-fall-forward/\">don't have a \"fallback,\" \"fall forward\" into Grid</a>.</p>\n</aside> <p>Currently, there’s no real browser support. Edge and IE10/11 “support” grid, but they implemented an early version of the specification and it’s significantly broken.</p> <aside class=\"reference\"> <p>This may be a bit of a strawman, but I've heard these three things multiple times now. I promise, the \"amazing\" team will eventually convince all the nay-sayers.</p> </aside> <p>To my way of thinking, there are currently three camps in the discussions around CSS Grid Layout: “I think this is amazing,” “I don’t see the use case, I’ll stick with flexbox” and “That’s great, but I won’t be able to use it for the next 5 years so what’s the point?” I hope this will begin to chip away at the two negative points of view to take a deeper look into Grid and provide my buddies in the “amazing” crowd with some basics to start playing with the specification themselves.</p> <aside class=\"subhead\"> <h2>Why Grid and not Flexbox?</h2> <aside class=\"reference\"><p>— <a href=\"http://lists.w3.org/Archives/Public/www-style/2013May/0114.html\">Tab Atkins on the CSS W3C mailing list</a> about the importance of set of complimentary layout specifications</p> </aside>\n</aside> <p>“Flexbox is for one-dimensional layouts - anything that needs to be laid out in a straight line (or in a broken line, which would be a single straight line if they were joined back together). Grid is for two-dimensional layouts. It can be used as a low-powered flexbox substitute (we’re trying to make sure that a single-column/row grid acts very similar to a flexbox), but that’s not using its full power.”</p> <p>For simple rows of content, Flexbox is still what you want to use. It works really well for flexible content flowing in one direction. Grid comes in when you want to place and stretch content blocks across both the horizontal and vertical axes.</p> <p>Let’s walk through a very simple implementation to see the difference.</p> <aside class=\"subhead\"> <h2>As Simple as it can get</h2> <aside class=\"reference\"><p>You can view this example on CodePen <a href=\"http://codepen.io/collection/AxZgro/\">in my collection on CSS Grid Simple Examples</a>.</p> </aside>\n</aside> <iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/euhahD_lD2I?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe> <p>In this video, I take some very simple markup and apply a very simple grid layout to it, emphasizing the concept of multi-dimensional layout.</p> <p>With very simple styling, we can make a div span across not just horizontal borders, but across vertical as well. Something that requires much more markup for Flexbox to accomplish.</p> <aside class=\"subhead\"> <h2>A bit more complex</h2>\n</aside> <iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/MX6qkMKrtoY?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe> <p>If you’re looking for a little more spice to your layout or wanting to do mosaic tiling – in the sense of a “Pinterest” layout – you can use a few more properties and create various sized divs that automatically have any holes in the layout backfilled by a placement algorithm that’s now going to be built into the browser.</p> <p>Instead of relying on JavaScript libraries like Masonry, we can handle all of this in CSS by using the grid-auto-flow property and setting it to ‘dense.’</p> <p>This is just the tip of the iceberg when it comes to Grid Layout and the fun really begins when you start placing real content on the page.</p> <p>Take a look at this simple banner concept done in Grid on CodePen. It would require three more container divs to truly make this design work in just Flexbox. I wouldn’t even attempt this layout with floats, personally.</p> <aside class=\"reference\"> <p>If you're not seeing an awesome layout over there in that CodePen, you don't have Grid supported. <a href=\"https://developers.google.com/web/updates/2014/03/Get-on-the-CSS-Grid\">Find out how to enable it in your browser here &raquo;</a></p> </aside> <iframe height=\"717\" scrolling=\"no\" title=\"Simple Banner area Grid concept\" src=\"//codepen.io/brob/embed/EZPWdK/?height=717&amp;theme-id=26704&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"http://codepen.io/brob/pen/EZPWdK/\">Simple Banner area Grid concept</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</iframe> <p>If you don’t have Grid enabled yet, here’s an image to see what’s interactive in the screen above:</p> <p><img src=\"/images/blog/grid-example/banner-grid-layout.png\" alt=\"An Image in case you don't want to turn on your Grid flag\" /></p> <p>Grid is going to allow us to have cleaner, more semantic markup and change layout on the fly much easier in CSS without having to reorder elements on the page.</p> <p><br /></p>","link":"https://bryanlrobinson.com/blog/2017/01/12/simple-grid-examples/","url":"https://bryanlrobinson.com/blog/2017/01/12/simple-grid-examples/","created":1484179200000},{"title":"I Converted My Blog to CSS Grid Layout and Regret Nothing","description":"<div class=\"reference\"> <h2 style=\"font-size: 1.3em;\">Update May 15, 2017</h2> <p>Since I published this piece, I've since converted even more of my site over to CSS Grid. If you're interested in my take on how to \"Fallback\" with CSS Grid, check out my post <a href=\"/blog/2017/01/18/your-code-should-fall-forward/\" title=\"Falling Forward — Rethinking Progressive Enhancement, Graceful Degradation and Developer Morality\">Falling Forward — Rethinking Progressive Enhancement, Graceful Degradation and Developer Morality</a> from January.</p>\n</div> <p>With the death of Lella Vignelli last week (Dec. 21, 2016), I read for the first time The Vignelli Canon.</p> <aside class=\"reference\"> <p>The Vignelli Canon is amazing for a whole host of reasons other than just it's simple layout. If you're interested at all in design, <a href=\"http://www.vignelli.com/canon.pdf\">please read it</a>.</p>\n</aside> <p>The layout of the pages inspired me. I knew that I wanted to give a quick update to some of my blog posts to mirror some of the design from that book – a book that talks about grids, as well.</p> <p>To do this, I decided to convert my blog posts to CSS Grid Layout.</p> <p>With the release of this blog post, I’m also releasing the updated code into the wild.</p> <aside class=\"reference\"> <p>Author's Note: This is no longer an issue. This was a problem of a percentage width being set on my right-side content. Apparently, percentage widths are not friendly toward grid height calculation.</p>\n</aside> <p>This is a super simple implementation <span style=\"text-decoration: line-through\">and doesn’t look quite right in the Firefox Developer build, due to height bugs</span> <span style=\"font-size: .7em;\">(more in author’s note)</span>, but it’s really nice in other experimental browsers – such as Chrome with the experimental flag checked.</p> <p>I’ve only converted one other blog post to the new layout at this point. Fittingly, it’s my post on <a href=\"/blog/2016/12/17/feature-queries-on-the-rise/\">Grid and Feature Queries</a>.</p> <aside class=\"reference\"> <p>If you're looking at this and all you see is a centered column, your browser doesn't support Grid yet. <a href=\"https://developers.google.com/web/updates/2014/03/Get-on-the-CSS-Grid\">Find out how to enable Grid to see this as intended</a>.</p>\n</aside> <p>I won’t dive into too many details, but here’s a snippet of some of the CSS I’m using to accomplish this layout.</p> <aside class=\"reference\"> <p>If you're interested in more, <a href=\"http://codepen.io/brob/pen/ZBZqOQ\">here's a CodePen where I'm experimenting more with layout</a>. This is also where I started laying this out.</p> </aside> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"nc\">.post</span> <span class=\"p\">{</span> <span class=\"cm\">/* Sets this to be a grid, defines the columns and adds margin between rows */</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"na\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span><span class=\"p\">;</span> <span class=\"na\">grid-row-gap</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"mi\">.8rem</span> <span class=\"o\">+</span> <span class=\"mi\">.5vw</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"nc\">.post</span> <span class=\"o\">&gt;</span> <span class=\"nt\">p</span><span class=\"o\">,</span> <span class=\"nc\">.post</span> <span class=\"o\">&gt;</span> <span class=\"nt\">iframe</span><span class=\"o\">,</span> <span class=\"nc\">.post</span> <span class=\"o\">&gt;</span> <span class=\"nc\">.highlight</span> <span class=\"p\">{</span> <span class=\"cm\">/* Sets my blog content to span the last 3 columns (using &gt; p instead of a class to make my life easy with markdown) */</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">3</span> <span class=\"o\">/</span> <span class=\"n\">span</span> <span class=\"m\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"nt\">aside</span> <span class=\"p\">{</span> <span class=\"cm\">/* Sets asides to start at the first column line and spans the aside 2 columns */</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"n\">span</span> <span class=\"m\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure> <aside class=\"subhead\"> <h2>A couple example posts</h2>\n</aside> <p>For those that don’t want to deal with adjusting the flags in their browsers to see both versions, here are two side-by-side examples of the differences in the blog posts.</p> <aside class=\"reference\"> <p>This post's implementation. On the left: CSS Grid. On the right: Fallback to non-supported browsers</p>\n</aside>\n<p><img src=\"/images/blog/grid/side-by-side2.jpg\" alt=\"Example Grid Layout Number 1\" /></p> <aside class=\"reference\"> <p><a href=\"/blog/2016/12/17/feature-queries-on-the-rise/\">My post on Feature Queries</a>. On the left: CSS Grid. On the right: Fallback to non-supported browsers</p>\n</aside> <p><img src=\"/images/blog/grid/side-by-side.jpg\" alt=\"Example Grid Layout Number 1\" /></p> <aside class=\"subhead\"> <h2>Update</h2> <p>Jan. 11, 2017</p>\n</aside> <p>Edge supports Feature Queries, unlike its predecessor. So, it was able to see my Grid declarations. To fix this for my Edge viewers – since Edge has a VERY broken implementation of Grid – I implemented a second level of Feature Query to account for browsers that support Grid (which Edge TECHNICALLY does) but also don’t support -ms-grid (which Edge does, as well) to keep Edge from seeing display: grid.</p> <p>The Feature Query now looks like this (could be more elegant, but my libsass doesn’t like compound Feature Queries right now):</p> <aside class=\"subhead\"> <h2>Update</h2> <p>May 24, 2017</p> <p>Thanks to the excellent <a href=\"https://twitter.com/gregwhitworth\" title=\"Greg Whitworth's twitter account\">@gregwhitworth</a> on Twitter, I have a much better feature query that will allow Edge to see the Grid when the newest version releases. Updated to the right. </p>\n</aside> <figure class=\"highlight\"><pre><code class=\"language-scss\" data-lang=\"scss\"><span class=\"k\">@supports</span> <span class=\"o\">(</span><span class=\"nt\">grid-auto-rows</span><span class=\"nd\">:</span> <span class=\"nt\">1px</span><span class=\"o\">)</span> <span class=\"p\">{</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span> <span class=\"na\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span> <span class=\"m\">1fr</span><span class=\"p\">;</span> <span class=\"na\">grid-row-gap</span><span class=\"p\">:</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"mi\">.8rem</span> <span class=\"o\">+</span> <span class=\"mi\">.5vw</span><span class=\"p\">);</span> <span class=\"o\">&gt;</span> <span class=\"nt\">p</span><span class=\"o\">,</span> <span class=\"nt\">iframe</span><span class=\"o\">,</span> <span class=\"nc\">.highlight</span> <span class=\"p\">{</span> <span class=\"nl\">grid-column</span><span class=\"p\">:</span> <span class=\"m\">3</span> <span class=\"o\">/</span> <span class=\"n\">span</span> <span class=\"m\">3</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure> <p>I originally ended the post by sarcastically saying “Thanks Microsoft.” As it turns out, this isn’t the worst thing in the world with the May 24th @supports update. So, “Thanks Microsoft for having someone looking out for us.”</p>","link":"https://bryanlrobinson.com/blog/2016/12/27/blog-converted-to-css-grid-layout/","url":"https://bryanlrobinson.com/blog/2016/12/27/blog-converted-to-css-grid-layout/","created":1482796800000},{"title":"Feature Queries are on the Rise","description":"<aside class=\"subhead\"> <h2>Does CSS have to be this way?</h2>\n</aside> <p>Since the Web became a more beautiful place with the advent of CSS, there’s always been a struggle in the use of more modern features of CSS with browsers which are either slower to adopt or more cautious in the way the implement features.</p> <p>There have been many potential solutions for this issue.</p> <p>First, baked directly into the CSS specification and the browser implementations is the fact that if a browser doesn’t understand a property, it will ignore it instead of sending the user an error. Silently failing means we can progressively enhance web applications without worrying about unsightly error messages being displayed.</p> <p>Then, Internet Explorer — a long-time culprit of compatibility issues — implemented the idea of conditional stylesheets. You could now build your site the way you wanted it and when things broke (such as z-index in IE7 or float and width issues in IE6) you could specify fixes for them in stylesheets only accessible by those specific versions of Internet Explorer. This means we can gracefully degrade the experience for out-of-date browsers.</p> <aside class=\"reference\"> <p>More examples of conditional stylesheets <a href=\"https://css-tricks.com/how-to-create-an-ie-only-stylesheet/\">over on CSS Tricks</a></p>\n</aside> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"c\">&lt;!-- Main CSS --&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"style.css\"</span> <span class=\"nt\">/&gt;</span> <span class=\"c\">&lt;!-- Just IE 7 overrides for style.css --&gt;</span>\n<span class=\"c\">&lt;!--[if IE 7]&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"ie7.css\"&gt;\n&lt;![endif]--&gt;</span> <span class=\"c\">&lt;!-- Less than IE 7 overrides for ie7.css and style.css --&gt;</span>\n<span class=\"c\">&lt;!--[if lt IE 7]&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"less-than-ie7.css\" /&gt;\n&lt;![endif]--&gt;</span></code></pre></figure> <p>Then, in 2009, came <a href=\"https://modernizr.com/\">the Modernizr javascript library by Faruk Ates</a>. This was a huge step forward in allowing you to target features not browsers in your code.</p> <p>The Modernizr library uses User Agent “sniffing” to find out what a user’s browser is capable of and then provides that information in a few ways for the developer to access. A dev can utilize the library in their javascript to test both CSS features and JS features. Modernizr also can provide your application with features dumped out in a string of class names on the &lt;html&gt; element on the page. Meaning your css can target browsers that support flexbox or browsers that DON’T support flexbox in new and powerful ways.</p> <figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;html</span> <span class=\"na\">class=</span><span class=\"s\">\"js no-flexbox canvas canvastext no-webgl no-touch geolocation postmessage no-websqldatabase no-indexeddb hashchange no-history draganddrop no-websockets rgba hsla multiplebgs backgroundsize no-borderimage borderradius boxshadow no-textshadow opacity no-cssanimations no-csscolumns no-cssgradients no-cssreflections csstransforms no-csstransforms3d no-csstransitions fontface generatedcontent video audio localstorage sessionstorage no-webworkers no-applicationcache svg inlinesvg smil svgclippaths\"</span><span class=\"nt\">&gt;</span></code></pre></figure> <p>This allows for a lot of flexibility, but is also odd bloat that appears in your &lt;html&gt; DOM node.</p> <aside class=\"reference\"> <p>View full details on the <a href=\"https://www.w3.org/TR/css3-conditional/#at-supports\">Conditional Rules Module Level 3 Spec</a></p>\n</aside> <p>All of these methods are great, but they aren’t native citizens of the specification. In the CSS Conditional Rules Module specification — the module that contains the media queries we all know and love for responsive design — the humble Feature Query also lives. A first-class citizen of CSS, the feature query allows for feature detection built right in and built with a syntax designers will already be familiar with based on years of building responsive sites using media queries.</p> <p>The syntax is relatively easy:</p> <figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"k\">@supports</span> <span class=\"p\">(</span><span class=\"n\">css-property</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"n\">or</span> <span class=\"p\">(</span><span class=\"n\">css-property</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">.class</span> <span class=\"p\">{</span> <span class=\"err\">…</span> <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></figure> <p>Here’s a concrete example using CSS Grid – an amazing new layout property that isn’t in even modern browsers until March or April 2017.</p> <aside class=\"subhead\"> <h2>No Feature Query</h2>\n</aside> <p>Here’s what the example looks like with no feature query. If you’re in a browser that supports Grid Layout – which you’re probably not – then you’ll see a great grid layout. If you’re not, you’ll see full-width block-level divs with images with no explanation.</p> <iframe height=\"500\" scrolling=\"no\" title=\"CSS Grid Example - No Feature Query\" src=\"//codepen.io/brob/embed/ENwbPK/?height=500&amp;theme-id=26704&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"http://codepen.io/brob/pen/ENwbPK/\">CSS Grid Example - No Feature Query</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</iframe> <aside class=\"subhead\"> <h2>Feature Query Showing Lack of Support</h2>\n</aside> <p>In this example, we simply hide the alert message from all browsers that DO support Grid layout and allow every other browser to use the default value set in the CSS for the bar allowing it to be visible.</p> <iframe height=\"500\" scrolling=\"no\" title=\"Feature Query - Show alert box\" src=\"//codepen.io/brob/embed/QGqOjo/?height=500&amp;theme-id=26704&amp;default-tab=css,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"http://codepen.io/brob/pen/QGqOjo/\">Feature Query - Show alert box</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</iframe> <aside class=\"subhead\"> <h2>Feature Query to Progressively Enhance to Grid</h2>\n</aside> <p>In this example, we build a nice layout utilizing the Flexbox property of CSS — which has support in all modern browsers — and then utilize Feature Queries to rebuild the grid using the Grid Layout properties.</p> <iframe height=\"500\" scrolling=\"no\" title=\"Feature Query to use Flexbox instead\" src=\"//codepen.io/brob/embed/oYGobW/?height=500&amp;theme-id=26704&amp;default-tab=css,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"http://codepen.io/brob/pen/oYGobW/\">Feature Query to use Flexbox instead</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</iframe> <p>This way you get a nice layout either way and for those that have enabled the use of CSS Grid, they get a really nice layout.</p> <p>There are loads of methods for progressively enhancing your site, but CSS Feature Queries are by far one of the cleanest ways of doing it that we’ve ever had.</p> <p>You can view all three codepens together in my <a href=\"http://codepen.io/collection/DdpPGk/\">CodePen Feature Query Collection</a></p> <p><em>If you have any questions, I’d be more than happy to answer in the comments or <a href=\"http://twitter.com/brob/\">on Twitter</a>.</em></p>","link":"https://bryanlrobinson.com/blog/2016/12/17/feature-queries-on-the-rise/","url":"https://bryanlrobinson.com/blog/2016/12/17/feature-queries-on-the-rise/","created":1481932800000},{"title":"CSS Shapes — Let the Text Flow Around You","description":"<p>There’s magic in the air around CSS right now. There’s so much new to be excited about. One simple thing that you should get excited about is the CSS Shapes Module.</p> <p>These are not CSS shapes like building triangles out of border property hacks. This is taking your content and shaping it around shapes and images.</p> <p>We all know how the internet works. It’s a bunch of rectangles. Some rectangles are filled with text. Some have images. Some rectangles have rounded corners. These all are still rectangles. This dates back to table-based layout. A table is literally a grouping of rectangles. It’s all we’ve known.</p> <p>What if I told you, that’s not the way it has to be?</p> <p>The CSS Shapes Module allows for us to wrap text around a shape (and with Level 2, flow text INTO a shape, but that’s still a ways away from production).</p> <p>It’s actually relatively simple to implement and works in VERY modern browsers with a simple fall back just to the way the internet has always worked.</p> <p>Let’s take a look at a few examples.</p> <p>So, if we have a circle (a shape I’m building via CSS in the other definition of CSS Shapes) and we float it left to allow the text to wrap around it, we get what we expect. A circle with text around it with two hard lines of whitespace.</p> <p><img src=\"/images/blog/circle-start.png\" alt=\"Typical float left with hard edges\" /></p> <p>That creates a little visual dissonance, though. If we’re trying to add fluidity to our design, the hard lines of that text ruin the feeling.</p> <p>We can simply add a property of css called “shape-outside” and assign a value of “circle()” and now the text KNOWS that that element is a circle and wraps around it in a nice fluid curve.</p> <p><img src=\"/images/blog/circle-around.png\" alt=\"Image of the shape-outside being applied\" /></p> <p>Circle is by far the easiest “cool” shape-outside, but you can also do ellipse() and polygon(), url() for images.</p> <p>Here’s a CodePen that shows an example of polygon() and url() as well as the circle example from above.</p> <p class=\"codepen\" data-height=\"450\" data-theme-id=\"dark\" data-slug-hash=\"vGRBeQ\" data-default-tab=\"scss, result\" data-animations=\"run\" data-editable=\"\" data-embed-version=\"2\"> See the Pen <a href=\"http://codepen.io/brob/pen/vGRBeQ/\">CSS Shapes Module</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async=\"\" src=\"//codepen.io/assets/embed/ei.js\"></script>","link":"https://bryanlrobinson.com/blog/2016/05/09/css-shapes-let-the-text-flow-around-you/","url":"https://bryanlrobinson.com/blog/2016/05/09/css-shapes-let-the-text-flow-around-you/","created":1462752000000},{"title":"Flexbox -- Let's start simple","description":"<style> .interior img { width: 80%; margin: 0 auto; display: block; }\n</style> <p>Layout in CSS is hard. We’ve spent the 2 decades since the inception of CSS battling with its idea of how to lay out content on the web.</p> <p>When we moved from table-based layouts to CSS layouts with floats and positioning, we gained a LOT of flexibility, but we also lost things like vertical centering that tables afforded us.</p> <p>Floats and positioning got us a long way to making really nice looking sites, but with the advent of responsive design and fluid layouts, the struggle has been real: hacky solutions; exploitation of CSS bugs; extraneous HTML; not to mention, front-end frameworks like Bootstrap and Foundation.</p> <p>Floats were great at putting content side-by-side, but came with height quirks and adding more content to a row could become tedious. Also, math was necessary to do things properly, and surprisingly both designers and developers don’t like math in many way.</p> <p>In the example below, I simply float 3 boxes side-by-side, but note on the container .stripe, I have a background-color set that doesn’t show on the page. This is because floated elements don’t have height according to their parent, meaning .stripe has no height itself.</p> <p><img src=\"/images/blog/flex-example-1.png\" alt=\"Floats, the struggle is real\" /></p> <p>If I insert an element that clears both left and right after, the background-color is now visible, because .stripe has a full height value.</p> <p><img src=\"/images/blog/flex-example-2.png\" alt=\"Floats, the struggle gets worse\" /></p> <p>If there are more HTML elements floated in the row, I either need to adjust my math to keep them on the row or accept that they’ll break to the next line. If I accept that they break to the next line and the height of my elements are uneven, then I get even more of a mess.</p> <p><img src=\"/images/blog/flex-example-3.png\" alt=\"Floats, oh god, what now?\" /></p> <p>Now, we have the Flexible Box Layout Module. This is a new display value that turns the direct children of the element it’s applied to into flexible boxes. So, using very similar markup, here is an example where I just apply “display: flex” to the stripe container.</p> <p><img src=\"/images/blog/flex-example-4.png\" alt=\"Flexbox arrives\" /></p> <p>Flex is allowing for each of these boxes to be flexible and fill up the space available and adjust their size depending on how much content is in the row. This is great for side-by-side layouts, but we “lose” the ability to have extra content break onto a new line. So we add 4 new content items and we get this:</p> <p><img src=\"/images/blog/flex-example-5.png\" alt=\"Flexbox isn't intelligent, but isn't dumb either\" /></p> <p>Which is amazingly helpful sometimes, but obviously has its drawbacks.</p> <p>Luckily we have a flex property to allow for our flex items to wrap, conveniently called flex-wrap. We set that to “wrap” and voila!</p> <p><img src=\"/images/blog/flex-example-6.png\" alt=\"Flex can do some amazing things\" /></p> <p>In the next Flexbox post I write, I’ll dig more into how we can have things wrap in new and exciting ways, but the defaults solve so many problems we’ve had over the years that it makes sense to try it out.</p> <p>If you’re interested in trying things out, head over to <a href=\"http://codepen.io/collection/nrkrew/\" title=\"Codepen collection on floats vs flex\">My Codepen collection</a></p> <p><a href=\"http://codepen.io/collection/nrkrew/\" class=\"button\">See it in Action</a></p>","link":"https://bryanlrobinson.com/blog/2016/05/02/flexbox-lets-start-simple/","url":"https://bryanlrobinson.com/blog/2016/05/02/flexbox-lets-start-simple/","created":1462147200000},{"title":"Memorializing Prince and Print vs. The Web","description":"<style> twitterwidget { margin: 0 auto; } .codepens { display: flex; justify-content:space-around; }\n</style> <p>A giant of the music industry passed on April 21. While I wasn’t a zealous follower of his music, I can tell you the world is a sadder place without Prince in it.</p> <p>But that’s not what I’m writing about. In the social media memorializing of this titan, I came across this:</p> <blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p dir=\"ltr\" lang=\"en\">Paper beats Web (again): Fantastic full-page layout for Prince in today&#8217;s Washington Post: <a href=\"https://t.co/SwwDMo5AGV\">pic.twitter.com/SwwDMo5AGV</a></p>\n<p>— Ron Charles (@RonCharles) <a href=\"https://twitter.com/RonCharles/status/723520050636963841\">April 22, 2016</a></p></blockquote>\n<p><script src=\"//platform.twitter.com/widgets.js\" async=\"\" charset=\"utf-8\"></script></p> <p>Now, I’m not one for arguing on the Internet, but I’ve been energized about web layout recently and had to respond. I fully agree that seeing that in print would have been very striking, but who says we can’t do things on the web? So, I threw together a quick CodePen and responded (<a href=\"http://codepen.io/brob/full/aNjVwy/\">Best viewed full screen here</a>). It’s not perfect, but took literally 15 minutes. With time and a bit of finesse, I could have translated that layout in a stronger way.</p> <p class=\"p1\"><span style=\"line-height: 1.5;\"><p class=\"codepen\" data-height=\"700\" data-theme-id=\"dark\" data-slug-hash=\"aNjVwy\" data-default-tab=\"result\" data-animations=\"run\" data-editable=\"\" data-embed-version=\"2\">\nSee the Pen <a href=\"http://codepen.io/brob/pen/aNjVwy/\">WaPo Prince Print</a> by Bryan Robinson (<a href=\"http://codepen.io/brob\">@brob</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async=\"\" src=\"//codepen.io/assets/embed/ei.js\"></script></span></p> <p>There’s a perception in the print media that the web lacks the ability for any truly creative layout. That’s just not true. What IS true is that if you chain your developers and designers to “traditional” web layout, they’ll have no way to innovate.</p> <p>Set them free and we can memorialize Prince like this:</p> <div class=\"codepens\"> <p class=\"p1\"><p class=\"codepen\" data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"PNBQwj\" data-default-tab=\"result\" data-animations=\"run\" data-editable=\"\" data-embed-version=\"2\">\nSee the Pen <a href=\"http://codepen.io/chrisgannon/pen/PNBQwj/\">Tribute To Prince</a> by Chris Gannon (<a href=\"http://codepen.io/chrisgannon\">@chrisgannon</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async=\"\" src=\"//codepen.io/assets/embed/ei.js\"></script></p>\n<p class=\"p1\"><p class=\"codepen\" data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"EKpmgY\" data-default-tab=\"result\" data-animations=\"run\" data-editable=\"\" data-embed-version=\"2\">\nSee the Pen <a href=\"http://codepen.io/edball/pen/EKpmgY/\">Purple Rain</a> by Ed Ball (<a href=\"http://codepen.io/edball\">@edball</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async=\"\" src=\"//codepen.io/assets/embed/ei.js\"></script></p>\n<p class=\"p1\"><p class=\"codepen\" data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"jPypLV\" data-default-tab=\"result\" data-animations=\"run\" data-editable=\"\" data-embed-version=\"2\">\nSee the Pen <a href=\"http://codepen.io/jasonhibbs/pen/jPypLV/\">Making it Rain (Purple)</a> by Jason Hibbs (<a href=\"http://codepen.io/jasonhibbs\">@jasonhibbs</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async=\"\" src=\"//codepen.io/assets/embed/ei.js\"></script></p> </div> <p>My point is this. The design can follow the content in subtle or not subtle ways. We can make beautiful layout on the web. Just let your designers and developers off their leash and allow them to experiment.</p>","link":"https://bryanlrobinson.com/blog/2016/04/28/memorializing-prince-and-print-vs-the-web/","url":"https://bryanlrobinson.com/blog/2016/04/28/memorializing-prince-and-print-vs-the-web/","created":1461801600000},{"title":"I went to Italy and noticed UX fails","description":"<p>Ciao friends! I’m just arriving back in the States from a trip to Italy. I’m not exactly much of a world traveller, but a good time was had. While I enjoyed the majority of what I saw, I also observed a few major usability fails that I wanted to bring up. Give the blog a little international flair.</p> <h2 id=\"optimal-viewing-for-artwork\">Optimal viewing for artwork</h2>\n<p>The Uffizzi Gallery in Florence is home to amazing works of art. The main point of interest for me was Botticelli’s The Birth of Venus. It lived up to the hype.</p> <p>However, going through some of the other galleries, I observed this.</p> <div style=\"width: 425px; margin-right: 20px; float: left;\"> <img src=\"/images/blog/uffizzi-gallery.jpg\" alt=\"The Gallery setup in the Uffizzi gallery\" />\n</div>\n<p>These are two pieces of art basically stacked on top of one another. There was a similar display on the other side of the room. It may not seem like a big deal, but these are large works that need to be observed not just up close, but also from a distance to truly take them in.</p> <p>The work in the back — the name of which I can’t remember — is nearly impossible to observe at the proper distance to appreciate it. You have to walk behind the piece in front. I’m by no means an art aficionado, but this seems to be a large fail by the gallery.</p> <h2 id=\"the-road-ways\">The Road Ways</h2>\n<p>There’s a feeling you get walking around the roads of Italy, a feeling that your life is no longer in your hands. Roads lead to piazzas — open air plazas — which often times have no demarcation between pedestrian areas, car areas and even lanes. These leads to some very awkward situations and the occasional harrowing journey to the other side.</p> <p>The other issue we ran into with the roadways in Italy (mainly Rome and Florence) was navigation. The street signs, when they existed, were cement signs put on the sides of buildings. This definitely looked nice, but was very hard to see.</p> <div class=\"captioned\"> <img src=\"/images/blog/italy-street-sign.jpg\" alt=\"Street sign in Italy by Shauna Panczyszyn\" class=\"captioned\" /> <div class=\"caption\">by Shauna Panczyszyn on https://nikkivillagomez.wordpress.com/2013/07/30/wayfinding-madness/</div>\n</div> <p>These signs fade into the background of most buildings on which they reside. It took us a couple days to get used to it, and even then it made finding our way around incredibly difficult.</p> <p>Overall, the trip was awesome, just found it interesting to see some UX fails from the real world overseas.</p> <h2 id=\"bonus-ux-win\">Bonus UX Win</h2> <p>We took an amazing tour of Pompeii and saw the city that was destroyed by Mount Vesuvius. One great accomplishment was on the main road through town. It acted as a road for chariots AND for the sewage to run down.</p> <p>This required a way for pedestrians to get across without walking through the refuse, but also needed a way to slow the chariots down as they came into the populated areas of town. Enter an amazing Roman-designed speed bump. It has channels through which chariot wheels and sewage can pass easily and acts as stepping stones for pedestrians to cross the street without needing to bury their feet in some nasty liquids.</p> <p>Truly amazing engineering from the past. Have a photo</p> <p><img src=\"/images/blog/pompei.jpg\" alt=\"Speed bumps in ancient Pompeii\" /></p>","link":"https://bryanlrobinson.com/blog/2015/06/22/i-went-to-italy-and-noticed-ux-fails/","url":"https://bryanlrobinson.com/blog/2015/06/22/i-went-to-italy-and-noticed-ux-fails/","created":1434931200000},{"title":"How to Get Designers to Contribute in Open Source","description":"<p>I’ve been thinking a decent bit this year about how to get designers involved in Open Source projects. There’s more and more being talked about in this vein, and I don’t plan on rehashing what they talked about (<a href=\"http://opendesign.foundation/articles/barriers-for-designers/\">The Intimidation Barrier</a> and <a href=\"http://una.im/open-source-design\">Open Source Design</a> by Una Kravets and one of the first guiding documents: <a href=\"http://opendesign.foundation/articles/the-open-source-design-manifesto/\">The Open Source Design Manifesto by Garth Braithwaite</a> to name but a couple).</p> <p>Instead I want to put forth a small way of seeking designers for your project: <a href=\"https://github.com/brob/Design-Brief\">The Open Source Design Brief</a>.</p> <p>Let me share a secret with any non-designer reading this: Designers want to work on puzzles and challenges, not just making something pretty. By giving designers a brief of what the project is (in a way they understand), what is needed and how to contribute, you’ll lower one barrier to entry.</p> <p>You’ll also specifically be telling designers: “We want you here. Please contribute.”</p> <p>This document is available on <a href=\"https://github.com/brob/Design-Brief\">GitHub to be forked and included in your project</a>. If you want to use it and don’t know how to write about your project in a way to draw in designers, I’d be more than happy to contribute to your project by writing this document for you (with your help, of course). Just leave a comment with a link to your repo or <a href=\"http://twitter.com/brob\">hit me up on Twitter</a>.</p>","link":"https://bryanlrobinson.com/blog/2015/05/31/get-designers-to-contribute-to-open-source/","url":"https://bryanlrobinson.com/blog/2015/05/31/get-designers-to-contribute-to-open-source/","created":1433030400000},{"title":"The True Gift of Your Former Code","description":"<p>I’m not in the same league as most developers I have the pleasure of meeting, but I had been pretty proud of the little Django app I put together for my old portfolio site.</p> <p>It worked pretty well. I had loads of plans for it when I made it — none of which came to fruition. In the end, it served it’s purpose and I learned a lot in the process.</p> <p>One thing I learned was that if you don’t know what your doing, you can kill your ability to locally develop if you let things sit for over six months and forget how everything is configured.</p> <p>The main thing I learned, however, is that no matter how decently you may have set things up, it’s possible that it’s a big pile of spaghetti about to topple off your plate. As I was setting up my new site to live at my beta URL, I decided to use an old static portfolio app on Webfaction as the “application” — why duplicate effort, right? As it turns out, ages ago, I’d somehow gotten my little media serving app PUT IN THE SAME DIRECTORY.</p> <p>It wasn’t until half the media on my old site was gone that I realized what was happening.</p> <p>I’m not what you’d call a “DevOps” kind of guy. Nor am I a sysadmin. So, I don’t really have true backups in place. I’m sure if I got in touch with Webfaction, they could bring it back up.</p> <p>You know what, though? Screw it. New site’s live at http://bryanlrobinson.com. Let’s not look back. I hated the look of that site anyway.</p>","link":"https://bryanlrobinson.com/blog/2015/01/18/the-true-gift-of-your-former-code/","url":"https://bryanlrobinson.com/blog/2015/01/18/the-true-gift-of-your-former-code/","created":1421539200000}],"title":"bryanlrobinson.com","description":"","url":"https://bryanlrobinson.com","image":""}